searchState.loadedDescShard("lpc11xx", 0, "Peripheral access API for …\n10-bit Analog-to-Digital Converter\nADC\n24 - ADC\n26 - BOD\nCache and branch predictor maintenance operations\nCache and branch predictor maintenance operations (not …\nCPUID\nCPUID\n16-bit Counter/Timer\nCT16B0\n16 - CT16B0\n16-bit Counter/Timer\nCT16B1\n17 - CT16B1\n32-bit Counter/Timer\nCT32B0\n18 - CT32B0\n32-bit Counter/Timer\nCT32B1\n19 - CT32B1\nController Area Network Controller\nC_CAN\n13 - C_CAN\nCore peripherals\nDebug Control Block\nDebug Control Block\nData Watchpoint and Trace unit\nData Watchpoint and Trace unit\nFlash Programming Firmware\nFLASHCTRL\n27 - FMC\nFlash Patch and Breakpoint unit\nFlash Patch and Breakpoint unit (not present on Cortex-M0 …\nFloating Point Unit (only present on <code>thumbv7em-none-eabihf</code>)\nGeneral Purpose I/O\nGPIO0\n31 - GPIO0\nGeneral Purpose I/O\nGPIO1\n30 - GPIO1\nGeneral Purpose I/O\nGPIO2\n29 - GPIO2\nGeneral Purpose I/O\nGPIO3\n28 - GPIO3\nInter-Integrated Circuit (I²C) Controller\nI2C\n15 - I2C\nI/O Configuration Block\nIOCON\nInstrumentation Trace Macrocell\nInstrumentation Trace Macrocell (not present on Cortex-M0 …\nEnumeration of all the interrupts\nMemory Protection Unit\nMemory Protection Unit\nNested Vector Interrupt Controller\nNested Vector Interrupt Controller\nNumber available in the NVIC for configuring priority\n0 - PIO0_0\n1 - PIO0_1\n10 - PIO0_10\n11 - PIO0_11\n2 - PIO0_2\n3 - PIO0_3\n4 - PIO0_4\n5 - PIO0_5\n6 - PIO0_6\n7 - PIO0_7\n8 - PIO0_8\n9 - PIO0_9\n12 - PIO1_0\nPower Management Unit\nPMU\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nAll the peripherals\nSystem Control Block\nSystem Control Block\nSerial Peripheral Interface\nSPI0\n20 - SPI0\nSerial Peripheral Interface\nSPI1\n14 - SPI1\nSystem Configuration Block\nSYSCON\nSysTick: System Timer\nSysTick: System Timer\nTrace Port Interface Unit\nTrace Port Interface Unit (not present on Cortex-M0 …\nUniversal Asynchronous Receiver/Transmitter\nUART\n21 - UART\n25 - WDT\nWindowed Watchdog Timer\nWWDT\n10-bit Analog-to-Digital Converter\nController Area Network Controller\nClears current value to 0\nClears <code>interrupt</code>’s pending state\nSet the PENDSTCLR bit in the ICSR register which will …\nSet the PENDSVCLR bit in the ICSR register which will …\nClear the SLEEPDEEP bit in the SCR register\nClear the SLEEPONEXIT bit in the SCR register\n16-bit Counter/Timer\n32-bit Counter/Timer\nDisables <code>interrupt</code>\nDisables counter\nDisables SysTick interrupt\nDisables TRACE. See <code>DCB::enable_trace()</code> for more details\n<strong>WARNING</strong> This method is a soundness hole in the API; it …\nEnables counter\nEnables SysTick interrupt\nEnables TRACE. This is for example required by the …\nFlash Programming Firmware\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCommon register and bit access and modify traits\nGets clock source\nGets current value\nReturns the NVIC priority of <code>interrupt</code>\nReturns the hardware priority of <code>system_handler</code>\nGets reload value\nReturns the reload value with which the counter would wrap …\nGeneral Purpose I/O\nChecks if an external reference clock is available\nChecks if the counter wrapped (underflowed) since the last …\nInter-Integrated Circuit (I²C) Controller\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nI/O Configuration Block\nChecks if counter is enabled\nIs there a debugger attached? (see note)\nChecks if <code>interrupt</code> is enabled\nChecks if SysTick interrupt is enabled\nChecks if <code>interrupt</code> is pending\nCheck if PENDSTSET bit in the ICSR register is set meaning …\nCheck if PENDSVSET bit in the ICSR register is set meaning …\nChecks if the calibration value is precise\nDisables <code>interrupt</code>\nNumber of comparators implemented\nForces <code>interrupt</code> into pending state\nPower Management Unit\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nSets clock source\nForces <code>interrupt</code> into pending state\nSet the PENDSTSET bit in the ICSR register which will pend …\nSet the PENDSVSET bit in the ICSR register which will pend …\nSets the “priority” of <code>interrupt</code> to <code>prio</code>\nSets the hardware priority of <code>system_handler</code> to <code>prio</code>\nSets reload value\nSet the SLEEPDEEP bit in the SCR register\nSet the SLEEPONEXIT bit in the SCR register\nSerial Peripheral Interface\nUnchecked version of <code>Peripherals::take</code>\nUnchecked version of <code>Peripherals::take</code>\nInitiate a system reset request to reset the MCU\nSystem Configuration Block\nInitiate a system reset request to reset the MCU\nReturns all the core peripherals <em>once</em>\nReturns all the peripherals <em>once</em>\nUniversal Asynchronous Receiver/Transmitter\nEnables <code>interrupt</code>\nClears <code>interrupt</code>’s pending state\nReturns the active exception number\nWindowed Watchdog Timer\nA/D Control Register. The ADCR register must be written to …\nA/D Channel n Data Register. This register contains the …\nA/D Global Data Register. Contains the result of the most …\nA/D Interrupt Enable Register. This register contains …\nRegister block\nA/D Status Register. This register contains DONE and …\nA/D Control Register. The ADCR register must be written to …\n0x00 - A/D Control Register. The ADCR register must be …\nA/D Channel n Data Register. This register contains the …\n0x10 - A/D Channel n Data Register. This register contains …\nReturns the argument unchanged.\nA/D Global Data Register. Contains the result of the most …\n0x04 - A/D Global Data Register. Contains the result of …\nA/D Interrupt Enable Register. This register contains …\n0x0c - A/D Interrupt Enable Register. This register …\nCalls <code>U::from(self)</code>.\nA/D Status Register. This register contains DONE and …\n0x30 - A/D Status Register. This register contains DONE …\nBurst mode.\nReader of field <code>BURST</code>\nWrite proxy for field <code>BURST</code>\nReader of field <code>CLKDIV</code>\nWrite proxy for field <code>CLKDIV</code>\nThis field selects the number of clocks used for each …\nReader of field <code>CLKS</code>\nWrite proxy for field <code>CLKS</code>\nThis bit is significant only when the START field contains …\n6: Start conversion when the edge selected by bit 27 …\n7: Start conversion when the edge selected by bit 27 …\n4: Start conversion when the edge selected by bit 27 …\n5: Start conversion when the edge selected by bit 27 …\n2: Start conversion when the edge selected by bit 27 …\n3: Start conversion when the edge selected by bit 27 …\nReader of field <code>EDGE</code>\nWrite proxy for field <code>EDGE</code>\n2: 9 clocks / 8 bits\n1: Start conversion on a rising edge on the selected …\n5: 6 clocks / 5 bits\n6: 5 clocks / 4 bits\n1: Hardware scan mode: The AD converter does repeated …\n1: 10 clocks / 9 bits\nReader of register CR\n0: Start conversion on a rising edge on the selected …\nReader of field <code>SEL</code>\nWrite proxy for field <code>SEL</code>\n3: 8 clocks / 7 bits\n4: 7 clocks / 6 bits\n1: Start conversion now\nWhen the BURST bit is 0, these bits control whether and …\nReader of field <code>START</code>\nWrite proxy for field <code>START</code>\n0: No start (this value should be used when clearing PDN …\n0: Software-controlled mode: Conversions are …\n0: 11 clocks / 10 bits\n7: 4 clocks / 3 bits\nWriter for register CR\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nBit 16 - Burst mode.\nBit 16 - Burst mode.\nClears the field bit\nClears the field bit\nBits 8:15 - The APB clock (PCLK) is divided by CLKDIV +1 …\nBits 8:15 - The APB clock (PCLK) is divided by CLKDIV +1 …\nBits 17:19 - This field selects the number of clocks used …\nBits 17:19 - This field selects the number of clocks used …\nBit 27 - This bit is significant only when the START field …\nBit 27 - This bit is significant only when the START field …\nStart conversion when the edge selected by bit 27 occurs …\nStart conversion when the edge selected by bit 27 occurs …\nStart conversion when the edge selected by bit 27 occurs …\nStart conversion when the edge selected by bit 27 occurs …\nStart conversion when the edge selected by bit 27 occurs …\nStart conversion when the edge selected by bit 27 occurs …\n9 clocks / 8 bits\nStart conversion on a rising edge on the selected CAP/MAT …\n6 clocks / 5 bits\n5 clocks / 4 bits\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHardware scan mode: The AD converter does repeated …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>EDGE_ON_CT16B0_MAT0</code>\nChecks if the value of the field is <code>EDGE_ON_CT16B0_MAT1</code>\nChecks if the value of the field is <code>EDGE_ON_CT32B0_MAT0</code>\nChecks if the value of the field is <code>EDGE_ON_CT32B0_MAT1</code>\nChecks if the value of the field is <code>EDGE_ON_PIO0_2</code>\nChecks if the value of the field is <code>EDGE_ON_PIO1_5</code>\nChecks if the value of the field is <code>EIGHT_BIT</code>\nChecks if the value of the field is <code>FALLING</code>\nChecks if the value of the field is <code>FIVE_BIT</code>\nChecks if the value of the field is <code>FOUR_BIT</code>\nChecks if the value of the field is <code>HWMODE</code>\nChecks if the value of the field is <code>NINE_BIT</code>\nChecks if the value of the field is <code>RISING</code>\nChecks if the value of the field is <code>SEVEN_BIT</code>\nChecks if the value of the field is <code>SIX_BIT</code>\nChecks if the value of the field is <code>START</code>\nChecks if the value of the field is <code>STOP</code>\nChecks if the value of the field is <code>SWMODE</code>\nChecks if the value of the field is <code>TEN_BIT</code>\nChecks if the value of the field is <code>THREE_BIT</code>\n10 clocks / 9 bits\nStart conversion on a rising edge on the selected CAP/MAT …\nBits 0:7 - Selects which of the AD7:0 pins is (are) to be …\nBits 0:7 - Selects which of the AD7:0 pins is (are) to be …\nSets the field bit\nSets the field bit\n8 clocks / 7 bits\n7 clocks / 6 bits\nBits 24:26 - When the BURST bit is 0, these bits control …\nBits 24:26 - When the BURST bit is 0, these bits control …\nStart conversion now\nNo start (this value should be used when clearing PDN to 0)\nSoftware-controlled mode: Conversions are …\n11 clocks / 10 bits\n4 clocks / 3 bits\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nReader of field <code>DONE</code>\nWrite proxy for field <code>DONE</code>\nReader of field <code>OVERRUN</code>\nWrite proxy for field <code>OVERRUN</code>\nReader of register DR%s\nReader of field <code>V_VREF</code>\nWrite proxy for field <code>V_VREF</code>\nWriter for register DR%s\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nClears the field bit\nClears the field bit\nBit 31 - This bit is set to 1 when an A/D conversion …\nBit 31 - This bit is set to 1 when an A/D conversion …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 30 - This bit is 1 in burst mode if the results of one …\nBit 30 - This bit is 1 in burst mode if the results of one …\nSets the field bit\nSets the field bit\nBits 6:15 - When DONE is 1, this field contains a binary …\nBits 6:15 - When DONE is 1, this field contains a binary …\nReader of field <code>CHN</code>\nWrite proxy for field <code>CHN</code>\nReader of field <code>DONE</code>\nWrite proxy for field <code>DONE</code>\nReader of field <code>OVERRUN</code>\nWrite proxy for field <code>OVERRUN</code>\nReader of register GDR\nReader of field <code>V_VREF</code>\nWrite proxy for field <code>V_VREF</code>\nWriter for register GDR\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nBits 24:26 - These bits contain the channel from which the …\nBits 24:26 - These bits contain the channel from which the …\nClears the field bit\nClears the field bit\nBit 31 - This bit is set to 1 when an A/D conversion …\nBit 31 - This bit is set to 1 when an A/D conversion …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 30 - This bit is 1 in burst mode if the results of one …\nBit 30 - This bit is 1 in burst mode if the results of one …\nSets the field bit\nSets the field bit\nBits 6:15 - When DONE is 1, this field contains a binary …\nBits 6:15 - When DONE is 1, this field contains a binary …\nReader of field <code>ADGINTEN</code>\nWrite proxy for field <code>ADGINTEN</code>\nReader of field <code>ADINTEN</code>\nWrite proxy for field <code>ADINTEN</code>\nReader of register INTEN\nWriter for register INTEN\nBit 8 - When 1, enables the global DONE flag in ADDR to …\nBit 8 - When 1, enables the global DONE flag in ADDR to …\nBits 0:7 - These bits allow control over which A/D …\nBits 0:7 - These bits allow control over which A/D …\nWrites raw bits to the field\nWrites raw bits to the field\nClears the field bit\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the field bit\nReader of field <code>ADINT</code>\nReader of field <code>DONE</code>\nReader of field <code>OVERRUN</code>\nReader of register STAT\nBit 16 - This bit is the A/D interrupt flag. It is one …\nBits 0:7 - These bits mirror the DONE status flags that …\nBits 8:15 - These bits mirror the OVERRRUN status flags …\nBaud rate prescaler extension register\nBit timing register\nCan clock divider register\nCAN control\nError counter\nMessage interface 1 arbitration 1\nMessage interface 1 arbitration 2\nMessage interface command mask - read direction\nMessage interface command mask - write direction\nMessage interface command request\nMessage interface 1 data A1\nMessage interface 1 data A2\nMessage interface 1 data B1\nMessage interface 1 data B2\nMessage interface 1 message control\nMessage interface 1 mask 1\nMessage interface 1 mask 2\nInterrupt register\nInterrupt pending 1\nInterrupt pending 2\nMessage valid 1\nMessage valid 2\nNew data 1\nNew data 2\nStatus register\nTest register\nTransmission request 1\nTransmission request 2\nRegister block\nBaud rate prescaler extension register\n0x18 - Baud rate prescaler extension register\nBit timing register\n0x0c - Bit timing register\nCan clock divider register\n0x180 - Can clock divider register\nCAN control\n0x00 - CAN control\nError counter\n0x08 - Error counter\n0x30 - Message interface 1 arbitration 1\n0x34 - Message interface 1 arbitration 2\n0x24 - Message interface command mask - read direction\n0x24 - Message interface command mask - read direction\n0x24 - Message interface command mask - write direction\n0x24 - Message interface command mask - write direction\n0x20 - Message interface command request\n0x3c - Message interface 1 data A1\n0x40 - Message interface 1 data A2\n0x44 - Message interface 1 data B1\n0x48 - Message interface 1 data B2\n0x38 - Message interface 1 message control\n0x28 - Message interface 1 mask 1\n0x2c - Message interface 1 mask 2\n0x90 - Message interface 1 arbitration 1\n0x94 - Message interface 1 arbitration 2\n0x84 - Message interface command mask - read direction\n0x84 - Message interface command mask - read direction\n0x84 - Message interface command mask - write direction\n0x84 - Message interface command mask - write direction\n0x80 - Message interface command request\n0x9c - Message interface 1 data A1\n0xa0 - Message interface 1 data A2\n0xa4 - Message interface 1 data B1\n0xa8 - Message interface 1 data B2\n0x98 - Message interface 1 message control\n0x88 - Message interface 1 mask 1\n0x8c - Message interface 1 mask 2\nMessage interface 1 arbitration 1\nMessage interface 1 arbitration 2\nMessage interface command mask - read direction\nMessage interface command mask - write direction\nMessage interface command request\nMessage interface 1 data A1\nMessage interface 1 data A2\nMessage interface 1 data B1\nMessage interface 1 data B2\nMessage interface 1 message control\nMessage interface 1 mask 1\nMessage interface 1 mask 2\nInterrupt register\n0x10 - Interrupt register\nInterrupt pending 1\n0x140 - Interrupt pending 1\nInterrupt pending 2\n0x144 - Interrupt pending 2\nMessage valid 1\n0x160 - Message valid 1\nMessage valid 2\n0x164 - Message valid 2\nNew data 1\n0x120 - New data 1\nNew data 2\n0x124 - New data 2\nStatus register\n0x04 - Status register\nTest register\n0x14 - Test register\nTransmission request 1\n0x100 - Transmission request 1\nTransmission request 2\n0x104 - Transmission request 2\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReader of field <code>BRPE</code>\nWrite proxy for field <code>BRPE</code>\nReader of register CANBRPE\nWriter for register CANBRPE\nWrites raw bits to the field\nBits 0:3 - Baud rate prescaler extension By programming …\nBits 0:3 - Baud rate prescaler extension By programming …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReader of field <code>BRP</code>\nWrite proxy for field <code>BRP</code>\nReader of register CANBT\nReader of field <code>SJW</code>\nWrite proxy for field <code>SJW</code>\nReader of field <code>TSEG1</code>\nWrite proxy for field <code>TSEG1</code>\nReader of field <code>TSEG2</code>\nWrite proxy for field <code>TSEG2</code>\nWriter for register CANBT\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nBits 0:5 - Baud rate prescaler The value by which the …\nBits 0:5 - Baud rate prescaler The value by which the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 6:7 - (Re)synchronization jump width Valid programmed …\nBits 6:7 - (Re)synchronization jump width Valid programmed …\nBits 8:11 - Time segment before the sample point Valid …\nBits 8:11 - Time segment before the sample point Valid …\nBits 12:14 - Time segment after the sample point Valid …\nBits 12:14 - Time segment after the sample point Valid …\nReader of field <code>CLKDIVVAL</code>\nWrite proxy for field <code>CLKDIVVAL</code>\nReader of register CANCLKDIV\nWriter for register CANCLKDIV\nWrites raw bits to the field\nBits 0:3 - Clock divider value. CAN_CLK = PCLK/(CLKDIVVAL …\nBits 0:3 - Clock divider value. CAN_CLK = PCLK/(CLKDIVVAL …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n1: The CPU has write access to the CANBT register while …\nConfiguration change enable.\nReader of field <code>CCE</code>\nWrite proxy for field <code>CCE</code>\nDisable automatic retransmission.\nReader of field <code>DAR</code>\nWrite proxy for field <code>DAR</code>\n1: Automatic retransmission disabled\n0: Disable CAN interrupts. The interrupt line is always …\n0: Disable error interrupt. No error status interrupt will …\n0: Disable status change interrupts. No status change …\nError interrupt enable.\nReader of field <code>EIE</code>\nWrite proxy for field <code>EIE</code>\n0: Automatic retransmission of disturbed messages enabled\n1: Enable CAN interrupts. The interrupt line is set to LOW …\n1: Enable error interrupt. A change in the bits BOFF or …\n1: Enable status change interrupts. A status change …\nModule interrupt enable.\nReader of field <code>IE</code>\nWrite proxy for field <code>IE</code>\n1: Initialization is started. On reset, software needs to …\nInitialization.\nReader of field <code>INIT</code>\nWrite proxy for field <code>INIT</code>\n0: The CPU has no write access to the bit timing register\n0: Normal operation\n0: Normal operation\nReader of register CANCNTL\nStatus change interrupt enable.\nReader of field <code>SIE</code>\nWrite proxy for field <code>SIE</code>\nTest mode enable.\n1: Test mode\nReader of field <code>TEST</code>\nWrite proxy for field <code>TEST</code>\nWriter for register CANCNTL\nThe CPU has write access to the CANBT register while the …\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nBit 6 - Configuration change enable.\nBit 6 - Configuration change enable.\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nBit 5 - Disable automatic retransmission.\nBit 5 - Disable automatic retransmission.\nDisable CAN interrupts. The interrupt line is always HIGH\nDisable error interrupt. No error status interrupt will be …\nDisable status change interrupts. No status change …\nAutomatic retransmission disabled\nBit 3 - Error interrupt enable.\nBit 3 - Error interrupt enable.\nEnable CAN interrupts. The interrupt line is set to LOW …\nEnable error interrupt. A change in the bits BOFF or EWARN …\nEnable status change interrupts. A status change interrupt …\nAutomatic retransmission of disturbed messages enabled\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBit 1 - Module interrupt enable.\nBit 1 - Module interrupt enable.\nBit 0 - Initialization.\nBit 0 - Initialization.\nInitialization is started. On reset, software needs to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>ACCESS</code>\nChecks if the value of the field is <code>DISABLE_CAN_INTERRUP</code>\nChecks if the value of the field is <code>DISABLE_ERROR_INTERR</code>\nChecks if the value of the field is <code>DISABLE_STATUS_CHANG</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLE_CAN_INTERRUPT</code>\nChecks if the value of the field is <code>ENABLE_ERROR_INTERRU</code>\nChecks if the value of the field is <code>ENABLE_STATUS_CHANGE</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>INITIALIZATION</code>\nChecks if the value of the field is <code>NOACCESS</code>\nChecks if the value of the field is <code>NORMAL_OPERATION_</code>\nChecks if the value of the field is <code>NORMAL_OPERATION_</code>\nChecks if the value of the field is <code>TEST_MODE_</code>\nThe CPU has no write access to the bit timing register\nNormal operation\nNormal operation\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nBit 2 - Status change interrupt enable.\nBit 2 - Status change interrupt enable.\nBit 7 - Test mode enable.\nBit 7 - Test mode enable.\nTest mode\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\n0: The receive counter is below the error passive level\n1: The receive counter has reached the error passive level …\nReader of register CANEC\nReader of field <code>REC_6_0</code>\nReceive error passive.\nReader of field <code>RP</code>\nReader of field <code>TEC_7_0</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>BELOWERRORPASSIVE</code>\nChecks if the value of the field is <code>ERRORPASSIVE</code>\nBits 8:14 - Receive error counter Current value of the …\nBit 15 - Receive error passive.\nBits 0:7 - Transmit error counter Current value of the …\nGet enumerated values variant\nReader of field <code>ID_15_0</code>\nWrite proxy for field <code>ID_15_0</code>\nReader of register CANIF%s_ARB1\nWriter for register CANIF%s_ARB1\nWrites raw bits to the field\nReturns the argument unchanged.\nBits 0:15 - Message identifier 29-bit identifier (extended …\nBits 0:15 - Message identifier 29-bit identifier (extended …\nCalls <code>U::from(self)</code>.\n1: The message object is configured and should be …\nMessage direction.\nReader of field <code>DIR</code>\nWrite proxy for field <code>DIR</code>\nReader of field <code>ID_28_16</code>\nWrite proxy for field <code>ID_28_16</code>\n0: The message object is ignored by the message handler\nMessage valid The CPU must reset the MSGVAL bit of all …\nReader of field <code>MSGVAL</code>\nWrite proxy for field <code>MSGVAL</code>\nReader of register CANIF%s_ARB2\n0: Direction = receive. On TXRQST, a Remote Frame with the …\n1: Direction = transmit. On TXRQST, the respective Message …\nWriter for register CANIF%s_ARB2\nExtend identifier.\nReader of field <code>XTD</code>\nWrite proxy for field <code>XTD</code>\n0: The 11-bit standard identifier will be used for this …\nThe 11-bit standard identifier will be used for this …\n1: The 29-bit extended identifier will be used for this …\nThe 29-bit extended identifier will be used for this …\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nClears the field bit\nClears the field bit\nClears the field bit\nThe message object is configured and should be considered …\nBit 13 - Message direction.\nBit 13 - Message direction.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBits 0:12 - Message identifier 29-bit identifier (extended …\nBits 0:12 - Message identifier 29-bit identifier (extended …\nThe message object is ignored by the message handler\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>_11_BIT_STANDARD_</code>\nChecks if the value of the field is <code>_29_BIT_EXTENDED_</code>\nChecks if the value of the field is <code>CONFIGURED</code>\nChecks if the value of the field is <code>IGNORE</code>\nChecks if the value of the field is <code>RECEIVE</code>\nChecks if the value of the field is <code>TRANSMIT</code>\nBit 15 - Message valid The CPU must reset the MSGVAL bit …\nBit 15 - Message valid The CPU must reset the MSGVAL bit …\nDirection = receive. On TXRQST, a Remote Frame with the …\nSets the field bit\nSets the field bit\nSets the field bit\nDirection = transmit. On TXRQST, the respective Message …\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nBit 14 - Extend identifier.\nBit 14 - Extend identifier.\nAccess arbitration bits.\nReader of field <code>ARB</code>\nWrite proxy for field <code>ARB</code>\n1: Clear INTPND bit in the message object\n1: Clear NEWDAT bit in the message object\nClear interrupt pending bit.\nReader of field <code>CLRINTPND</code>\nWrite proxy for field <code>CLRINTPND</code>\nAccess control bits.\nReader of field <code>CTRL</code>\nWrite proxy for field <code>CTRL</code>\nAccess data bytes 0-3.\nReader of field <code>DATA_A</code>\nWrite proxy for field <code>DATA_A</code>\nAccess data bytes 4-7.\nReader of field <code>DATA_B</code>\nWrite proxy for field <code>DATA_B</code>\nAccess mask bits.\nReader of field <code>MASK</code>\nWrite proxy for field <code>MASK</code>\nAccess new data bit.\nReader of field <code>NEWDAT</code>\nWrite proxy for field <code>NEWDAT</code>\nReader of register CANIF%s_CMDMSK_R\n1: Transfer control bits to IFx message buffer\n1: Transfer data bytes 4-7 to IFx message buffer register\n1: Transfer data bytes 0-3 to IFx message buffer\n1: Transfer Identifier, DIR, XTD, and MSGVAL bits to IFx …\n1: Transfer Identifier MASK + MDIR + MXTD to IFx message …\n0: Data bytes 4-7 unchanged\n0: Data bytes 0-3 unchanged\n0: NEWDAT bit remains unchanged. A read access to a …\n0: INTPND bit remains unchanged\n0: Control bits unchanged\n0: Arbitration bits unchanged\n0: Mask bits unchanged\nWriter for register CANIF%s_CMDMSK_R\nReader of field <code>WR_RD</code>\nWrite proxy for field <code>WR_RD</code>\nBit 5 - Access arbitration bits.\nBit 5 - Access arbitration bits.\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClear INTPND bit in the message object\nClear NEWDAT bit in the message object\nBit 3 - Clear interrupt pending bit.\nBit 3 - Clear interrupt pending bit.\nBit 4 - Access control bits.\nBit 4 - Access control bits.\nBit 1 - Access data bytes 0-3.\nBit 1 - Access data bytes 0-3.\nBit 0 - Access data bytes 4-7.\nBit 0 - Access data bytes 4-7.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>CLEAR_INTPND_BIT_IN_</code>\nChecks if the value of the field is <code>CLEAR_NEWDAT_BIT_IN_</code>\nChecks if the value of the field is <code>TRANSFER_CONTROL_BIT</code>\nChecks if the value of the field is <code>TRANSFER_DATA_BYTES_</code>\nChecks if the value of the field is <code>TRANSFER_DATA_BYTES_</code>\nChecks if the value of the field is <code>TRANSFER_IDENTIFIER</code>\nChecks if the value of the field is <code>TRANSFER_IDENTIFIER_</code>\nChecks if the value of the field is <code>UNCHANGED</code>\nChecks if the value of the field is <code>UNCHANGED</code>\nChecks if the value of the field is <code>UNCHANGED</code>\nChecks if the value of the field is <code>UNCHANGED</code>\nChecks if the value of the field is <code>UNCHANGED</code>\nChecks if the value of the field is <code>UNCHANGED</code>\nChecks if the value of the field is <code>UNCHANGED</code>\nBit 6 - Access mask bits.\nBit 6 - Access mask bits.\nBit 2 - Access new data bit.\nBit 2 - Access new data bit.\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nTransfer control bits to IFx message buffer\nTransfer data bytes 4-7 to IFx message buffer register\nTransfer data bytes 0-3 to IFx message buffer\nTransfer Identifier, DIR, XTD, and MSGVAL bits to IFx …\nTransfer Identifier MASK + MDIR + MXTD to IFx message …\nData bytes 4-7 unchanged\nData bytes 0-3 unchanged\nNEWDAT bit remains unchanged. A read access to a message …\nINTPND bit remains unchanged\nControl bits unchanged\nArbitration bits unchanged\nMask bits unchanged\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nBit 7 - Read transfer Transfer data from the message …\nBit 7 - Read transfer Transfer data from the message …\nAccess arbitration bits.\nReader of field <code>ARB</code>\nWrite proxy for field <code>ARB</code>\nReader of field <code>CLRINTPND</code>\nWrite proxy for field <code>CLRINTPND</code>\nAccess control bits.\nReader of field <code>CTRL</code>\nWrite proxy for field <code>CTRL</code>\nAccess data bytes 0-3.\nReader of field <code>DATA_A</code>\nWrite proxy for field <code>DATA_A</code>\n0: Data bytes 0-3 unchanged\n0: Data bytes 4-7 unchanged\nAccess data bytes 4-7.\nReader of field <code>DATA_B</code>\nWrite proxy for field <code>DATA_B</code>\nAccess mask bits.\nReader of field <code>MASK</code>\nWrite proxy for field <code>MASK</code>\n0: No transmission request. TXRQSRT bit unchanged in …\nReader of register CANIF%s_CMDMSK_W\n1: Request a transmission. Set the TXRQST bit IF1/2_MCTRL\n1: Transfer control bits to message object\n1: Transfer data bytes 4-7 to message object\n1: Transfer data bytes 0-3 to message object\n1: Transfer Identifier, DIR, XTD, and MSGVAL bits to …\n1: Transfer Identifier MASK + MDIR + MXTD to message object\nAccess transmission request bit.\nReader of field <code>TXRQST</code>\nWrite proxy for field <code>TXRQST</code>\n0: Control bits unchanged\n0: Arbitration bits unchanged\n0: Mask bits unchanged\nWriter for register CANIF%s_CMDMSK_W\nReader of field <code>WR_RD</code>\nWrite proxy for field <code>WR_RD</code>\nBit 5 - Access arbitration bits.\nBit 5 - Access arbitration bits.\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nBit 3 - This bit is ignored in the write direction.\nBit 3 - This bit is ignored in the write direction.\nBit 4 - Access control bits.\nBit 4 - Access control bits.\nBit 1 - Access data bytes 0-3.\nBit 1 - Access data bytes 0-3.\nBit 0 - Access data bytes 4-7.\nBit 0 - Access data bytes 4-7.\nData bytes 0-3 unchanged\nData bytes 4-7 unchanged\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DATA_BYTES_0_3_UNCHA</code>\nChecks if the value of the field is <code>DATA_BYTES_4_7_UNCHA</code>\nChecks if the value of the field is <code>NO_TRANSMISSION_REQU</code>\nChecks if the value of the field is <code>REQUEST_A_TRANSMISSI</code>\nChecks if the value of the field is <code>TRANSFER_CONTROL_BIT</code>\nChecks if the value of the field is <code>TRANSFER_DATA_BYTES_</code>\nChecks if the value of the field is <code>TRANSFER_DATA_BYTES_</code>\nChecks if the value of the field is <code>TRANSFER_IDENTIFIER</code>\nChecks if the value of the field is <code>TRANSFER_IDENTIFIER_</code>\nChecks if the value of the field is <code>UNCHANGED</code>\nChecks if the value of the field is <code>UNCHANGED</code>\nChecks if the value of the field is <code>UNCHANGED</code>\nBit 6 - Access mask bits.\nBit 6 - Access mask bits.\nNo transmission request. TXRQSRT bit unchanged in …\nRequest a transmission. Set the TXRQST bit IF1/2_MCTRL\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nTransfer control bits to message object\nTransfer data bytes 4-7 to message object\nTransfer data bytes 0-3 to message object\nTransfer Identifier, DIR, XTD, and MSGVAL bits to message …\nTransfer Identifier MASK + MDIR + MXTD to message object\nBit 2 - Access transmission request bit.\nBit 2 - Access transmission request bit.\nControl bits unchanged\nArbitration bits unchanged\nMask bits unchanged\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nBit 7 - Write transfer Transfer data from the selected …\nBit 7 - Write transfer Transfer data from the selected …\nBUSY flag.\nReader of field <code>BUSY</code>\nWrite proxy for field <code>BUSY</code>\nReader of field <code>MN</code>\nWrite proxy for field <code>MN</code>\n1: Set to one by hardware when writing to this Command …\nReader of register CANIF%s_CMDREQ\nWriter for register CANIF%s_CMDREQ\n0: Set to zero by hardware when read/write action to this …\nWrites raw bits to the field\nWrites raw bits to the field\nBit 15 - BUSY flag.\nBit 15 - BUSY flag.\nClears the field bit\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>ONE</code>\nChecks if the value of the field is <code>ZERO</code>\nBits 0:5 - Message number 0x01 - 0x20 = Valid message …\nBits 0:5 - Message number 0x01 - 0x20 = Valid message …\nSet to one by hardware when writing to this Command …\nSets the field bit\nGet enumerated values variant\nWrites <code>variant</code> to the field\nSet to zero by hardware when read/write action to this …\nReader of field <code>DATA0</code>\nWrite proxy for field <code>DATA0</code>\nReader of field <code>DATA1</code>\nWrite proxy for field <code>DATA1</code>\nReader of register CANIF%s_DA1\nWriter for register CANIF%s_DA1\nWrites raw bits to the field\nWrites raw bits to the field\nBits 0:7 - Data byte 0.\nBits 0:7 - Data byte 0.\nBits 8:15 - Data byte 1.\nBits 8:15 - Data byte 1.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReader of field <code>DATA2</code>\nWrite proxy for field <code>DATA2</code>\nReader of field <code>DATA3</code>\nWrite proxy for field <code>DATA3</code>\nReader of register CANIF%s_DA2\nWriter for register CANIF%s_DA2\nWrites raw bits to the field\nWrites raw bits to the field\nBits 0:7 - Data byte 2.\nBits 0:7 - Data byte 2.\nBits 8:15 - Data byte 3.\nBits 8:15 - Data byte 3.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReader of field <code>DATA4</code>\nWrite proxy for field <code>DATA4</code>\nReader of field <code>DATA5</code>\nWrite proxy for field <code>DATA5</code>\nReader of register CANIF%s_DB1\nWriter for register CANIF%s_DB1\nWrites raw bits to the field\nWrites raw bits to the field\nBits 0:7 - Data byte 4.\nBits 0:7 - Data byte 4.\nBits 8:15 - Data byte 5.\nBits 8:15 - Data byte 5.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReader of field <code>DATA6</code>\nWrite proxy for field <code>DATA6</code>\nReader of field <code>DATA7</code>\nWrite proxy for field <code>DATA7</code>\nReader of register CANIF%s_DB2\nWriter for register CANIF%s_DB2\nWrites raw bits to the field\nWrites raw bits to the field\nBits 0:7 - Data byte 6.\nBits 0:7 - Data byte 6.\nBits 8:15 - Data byte 7.\nBits 8:15 - Data byte 7.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReader of field <code>DLC_3_0</code>\nWrite proxy for field <code>DLC_3_0</code>\nEnd of buffer.\nReader of field <code>EOB</code>\nWrite proxy for field <code>EOB</code>\n0: Message object belongs to a FIFO buffer and is not the …\n0: Mask ignored\nInterrupt pending.\nReader of field <code>INTPND</code>\nWrite proxy for field <code>INTPND</code>\n1: This message object is the source of an interrupt. The …\nMessage lost (only valid for message objects in the …\nReader of field <code>MSGLST</code>\nWrite proxy for field <code>MSGLST</code>\n1: The message handler or the CPU has written new data …\nNew data.\nReader of field <code>NEWDAT</code>\nWrite proxy for field <code>NEWDAT</code>\n1: The Message Handler stored a new message into this …\n0: At the reception of a remote frame, TXRQST is left …\n0: INTPND will be left unchanged after successful …\n0: The INTPND bit will be left unchanged after a …\n0: This message object is not the source of an interrupt\n0: No message lost since this bit was reset last by the CPU\n0: No new data has been written into the data portion of …\n0: This message object is not waiting for transmission\nReader of register CANIF%s_MCTRL\nRemote enable.\nReader of field <code>RMTEN</code>\nWrite proxy for field <code>RMTEN</code>\nReceive interrupt enable.\nReader of field <code>RXIE</code>\nWrite proxy for field <code>RXIE</code>\n1: At the reception of a remote frame, TXRQST is set\n1: INTPND will be set after successful reception of a frame\n1: INTPND will be set after a successful transmission of a …\n1: Single message object or last message object of a FIFO …\nTransmit interrupt enable.\nReader of field <code>TXIE</code>\nWrite proxy for field <code>TXIE</code>\nTransmit request.\nReader of field <code>TXRQST</code>\nWrite proxy for field <code>TXRQST</code>\nUse acceptance mask If UMASK is set to 1, the message …\nReader of field <code>UMASK</code>\nWrite proxy for field <code>UMASK</code>\n1: Use mask (MSK[28:0], MXTD, and MDIR) for acceptance …\nWriter for register CANIF%s_MCTRL\n1: The transmission of this message object is requested …\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nBits 0:3 - Data length code The Data Length Code of a …\nBits 0:3 - Data length code The Data Length Code of a …\nBit 7 - End of buffer.\nBit 7 - End of buffer.\nMessage object belongs to a FIFO buffer and is not the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMask ignored\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 13 - Interrupt pending.\nBit 13 - Interrupt pending.\nThis message object is the source of an interrupt. The …\nChecks if the value of the field is <code>FIFO</code>\nChecks if the value of the field is <code>IGNORE</code>\nChecks if the value of the field is <code>INTSOURCE</code>\nChecks if the value of the field is <code>NEWDATA</code>\nChecks if the value of the field is <code>NEWMESSAGE</code>\nChecks if the value of the field is <code>NOCHANGE</code>\nChecks if the value of the field is <code>NOCHANGE</code>\nChecks if the value of the field is <code>NOCHANGE</code>\nChecks if the value of the field is <code>NOINTSOURCE</code>\nChecks if the value of the field is <code>NOLOST</code>\nChecks if the value of the field is <code>NONEWDATA</code>\nChecks if the value of the field is <code>NOWAIT</code>\nChecks if the value of the field is <code>SET</code>\nChecks if the value of the field is <code>SET</code>\nChecks if the value of the field is <code>SET</code>\nChecks if the value of the field is <code>SINGELAST</code>\nChecks if the value of the field is <code>USEMASK</code>\nChecks if the value of the field is <code>WAIT</code>\nBit 14 - Message lost (only valid for message objects in …\nBit 14 - Message lost (only valid for message objects in …\nBit 15 - New data.\nBit 15 - New data.\nThe message handler or the CPU has written new data into …\nThe Message Handler stored a new message into this object …\nAt the reception of a remote frame, TXRQST is left …\nINTPND will be left unchanged after successful reception …\nThe INTPND bit will be left unchanged after a successful …\nThis message object is not the source of an interrupt\nNo message lost since this bit was reset last by the CPU\nNo new data has been written into the data portion of this …\nThis message object is not waiting for transmission\nBit 9 - Remote enable.\nBit 9 - Remote enable.\nBit 10 - Receive interrupt enable.\nBit 10 - Receive interrupt enable.\nAt the reception of a remote frame, TXRQST is set\nINTPND will be set after successful reception of a frame\nINTPND will be set after a successful transmission of a …\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSingle message object or last message object of a FIFO …\nBit 11 - Transmit interrupt enable.\nBit 11 - Transmit interrupt enable.\nBit 8 - Transmit request.\nBit 8 - Transmit request.\nBit 12 - Use acceptance mask If UMASK is set to 1, the …\nBit 12 - Use acceptance mask If UMASK is set to 1, the …\nUse mask (MSK[28:0], MXTD, and MDIR) for acceptance …\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nThe transmission of this message object is requested and …\n1: The corresponding identifier bit is used for acceptance …\nIdentifier mask.\nReader of field <code>MSK_15_0</code>\nWrite proxy for field <code>MSK_15_0</code>\n0: The corresponding bit in the identifier of the message …\nReader of register CANIF%s_MSK1\nWriter for register CANIF%s_MSK1\nThe corresponding identifier bit is used for acceptance …\nWrites raw bits to the field\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>ACCEPTANCEFILTERING</code>\nChecks if the value of the field is <code>NOINHIBIT</code>\nBits 0:15 - Identifier mask.\nBits 0:15 - Identifier mask.\nThe corresponding bit in the identifier of the message can …\nGet enumerated values variant\nWrites <code>variant</code> to the field\n1: The corresponding identifier bit is used for acceptance …\n1: The message direction bit (DIR) is used for acceptance …\n1: The extended identifier bit (XTD) is used for …\nMask message direction.\nReader of field <code>MDIR</code>\nWrite proxy for field <code>MDIR</code>\nIdentifier mask.\nReader of field <code>MSK_28_16</code>\nWrite proxy for field <code>MSK_28_16</code>\nMask extend identifier.\nReader of field <code>MXTD</code>\nWrite proxy for field <code>MXTD</code>\n0: The message direction bit (DIR) has no effect on …\n0: The extended identifier bit (XTD) has no effect on …\n0: The corresponding bit in the identifier of the message …\nReader of register CANIF%s_MSK2\nWriter for register CANIF%s_MSK2\nThe corresponding identifier bit is used for acceptance …\nThe message direction bit (DIR) is used for acceptance …\nThe extended identifier bit (XTD) is used for acceptance …\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nClears the field bit\nClears the field bit\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>ACCEPTANCEFILTERING</code>\nChecks if the value of the field is <code>ACCEPTANCEFILTERING</code>\nChecks if the value of the field is <code>ACCEPTANCEFILTERING</code>\nChecks if the value of the field is <code>NOEFFECT</code>\nChecks if the value of the field is <code>NOEFFECT</code>\nChecks if the value of the field is <code>NOINHIBIT</code>\nBit 14 - Mask message direction.\nBit 14 - Mask message direction.\nBits 0:12 - Identifier mask.\nBits 0:12 - Identifier mask.\nBit 15 - Mask extend identifier.\nBit 15 - Mask extend identifier.\nThe message direction bit (DIR) has no effect on …\nThe extended identifier bit (XTD) has no effect on …\nThe corresponding bit in the identifier of the message can …\nSets the field bit\nSets the field bit\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nReader of field <code>INTID</code>\nReader of register CANINT\nBits 0:15 - 0x0000 = No interrupt is pending. 0x0001 - …\nReader of field <code>INTPND_16_1</code>\nReader of register CANIR1\nBits 0:15 - Interrupt pending bits of message objects 16 …\nReader of field <code>INTPND_32_17</code>\nReader of register CANIR2\nBits 0:15 - Interrupt pending bits of message objects 32 …\nReader of field <code>MSGVAL_16_1</code>\nReader of register CANMSGV1\nBits 0:15 - Message valid bits of message objects 16 to 1. …\nReader of field <code>MSGVAL_32_17</code>\nReader of register CANMSGV2\nBits 0:15 - Message valid bits of message objects 32 to …\nReader of field <code>NEWDAT_16_1</code>\nReader of register CANND1\nBits 0:15 - New data bits of message objects 16 to 1. 0 = …\nReader of field <code>NEWDAT_32_17</code>\nReader of register CANND2\nBits 0:15 - New data bits of message objects 32 to 17. 0 = …\n3: AckError: The message this CAN core transmitted was not …\n0: The CAN controller is in the error active state\n0: Both error counters are below the error warning limit …\n5: Bit0Error: During the transmission of a message (or …\n4: Bit1Error: During the transmission of a message (with …\nBusoff status.\nReader of field <code>BOFF</code>\nWrite proxy for field <code>BOFF</code>\n1: The CAN controller is in busoff state\n6: CRCError: The CRC checksum was incorrect in the message …\nError passive.\nReader of field <code>EPASS</code>\nWrite proxy for field <code>EPASS</code>\nWarning status.\nReader of field <code>EWARN</code>\nWrite proxy for field <code>EWARN</code>\n2: Form error: A fixed format part of a received frame has …\nLast error code Type of the last error to occur on the CAN …\nReader of field <code>LEC</code>\nWrite proxy for field <code>LEC</code>\n0: The CAN module is not in busoff\n0: Since this bit was reset by the CPU, no message has …\n0: Since this bit was last reset by the CPU, no message …\n0: No error\n1: The CAN controller is in the error passive state as …\nReader of register CANSTAT\nReceived a message successfully This bit is reset by the …\nReader of field <code>RXOK</code>\nWrite proxy for field <code>RXOK</code>\n1: Stuff error: More than 5 equal bits in a sequence have …\n1: Since this bit was last reset by the CPU, a message has …\n1: Since this bit was last set to zero by the CPU, a …\nTransmitted a message successfully This bit is reset by …\nReader of field <code>TXOK</code>\nWrite proxy for field <code>TXOK</code>\n7: Unused: No CAN bus event was detected (written by the …\nWriter for register CANSTAT\n1: At least one of the error counters in the EML has …\nAckError: The message this CAN core transmitted was not …\nThe CAN controller is in the error active state\nBoth error counters are below the error warning limit of 96\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nBit0Error: During the transmission of a message (or …\nBit1Error: During the transmission of a message (with the …\nWrites raw bits to the field\nBit 7 - Busoff status.\nBit 7 - Busoff status.\nThe CAN controller is in busoff state\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nCRCError: The CRC checksum was incorrect in the message …\nBit 5 - Error passive.\nBit 5 - Error passive.\nBit 6 - Warning status.\nBit 6 - Warning status.\nForm error: A fixed format part of a received frame has …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>ACKERROR</code>\nChecks if the value of the field is <code>ACTIVE</code>\nChecks if the value of the field is <code>BELOWWARNINGLIM</code>\nChecks if the value of the field is <code>BIT0ERROR</code>\nChecks if the value of the field is <code>BIT1ERROR</code>\nChecks if the value of the field is <code>BUSOFF</code>\nChecks if the value of the field is <code>CRCERROR</code>\nChecks if the value of the field is <code>FORM_ERROR</code>\nChecks if the value of the field is <code>NO_ERROR_</code>\nChecks if the value of the field is <code>NOTBUSOFF</code>\nChecks if the value of the field is <code>NOTRANSMIT</code>\nChecks if the value of the field is <code>NOTRANSMIT</code>\nChecks if the value of the field is <code>PASSIVE</code>\nChecks if the value of the field is <code>STUFF_ERROR</code>\nChecks if the value of the field is <code>TRANSMIT</code>\nChecks if the value of the field is <code>TRANSMIT</code>\nChecks if the value of the field is <code>UNUSED</code>\nChecks if the value of the field is <code>WARNINGLIM</code>\nBits 0:2 - Last error code Type of the last error to occur …\nBits 0:2 - Last error code Type of the last error to occur …\nNo error\nThe CAN module is not in busoff\nSince this bit was reset by the CPU, no message has been …\nSince this bit was last reset by the CPU, no message has …\nThe CAN controller is in the error passive state as …\nBit 4 - Received a message successfully This bit is reset …\nBit 4 - Received a message successfully This bit is reset …\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nStuff error: More than 5 equal bits in a sequence have …\nSince this bit was last reset by the CPU, a message has …\nSince this bit was last set to zero by the CPU, a message …\nBit 3 - Transmitted a message successfully This bit is …\nBit 3 - Transmitted a message successfully This bit is …\nUnused: No CAN bus event was detected (written by the CPU)\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nAt least one of the error counters in the EML has reached …\nBasic mode.\n0: Basic mode disabled\nReader of field <code>BASIC</code>\nWrite proxy for field <code>BASIC</code>\n0: Loop back mode is disabled\n1: The CAN bus is dominant (CAN_RXD = 0)\n1: Loop back mode is enabled\n3: CAN_TXD pin is driven HIGH/recessive\nLoop back mode.\nReader of field <code>LBACK</code>\nWrite proxy for field <code>LBACK</code>\n0: Level at the CAN_TXD pin is controlled by the CAN …\n2: CAN_TXD pin is driven LOW/dominant\n0: Normal operation\nReader of register CANTEST\n0: The CAN bus is recessive (CAN_RXD = 1)\nMonitors the actual value of the CAN_RXD pin.\nReader of field <code>RX</code>\nWrite proxy for field <code>RX</code>\n1: The module is in silent mode\nSilent mode.\nReader of field <code>SILENT</code>\nWrite proxy for field <code>SILENT</code>\n1: The sample point can be monitored at the CAN_TXD pin\n1: IF1 registers used as TX buffer, IF2 registers used as …\nControl of CAN_TXD pins.\nReader of field <code>TX</code>\nWrite proxy for field <code>TX</code>\nWriter for register CANTEST\nBit 2 - Basic mode.\nBit 2 - Basic mode.\nBasic mode disabled\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nLoop back mode is disabled\nThe CAN bus is dominant (CAN_RXD = 0)\nLoop back mode is enabled\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCAN_TXD pin is driven HIGH/recessive\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>BASIC_MODE_DISABLED_</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DORMANT</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>HIGH</code>\nChecks if the value of the field is <code>LEVEL</code>\nChecks if the value of the field is <code>LOW</code>\nChecks if the value of the field is <code>NORMAL_OPERATION_</code>\nChecks if the value of the field is <code>RECESSIVE</code>\nChecks if the value of the field is <code>SILENT</code>\nChecks if the value of the field is <code>TXD</code>\nChecks if the value of the field is <code>TXRX</code>\nBit 4 - Loop back mode.\nBit 4 - Loop back mode.\nLevel at the CAN_TXD pin is controlled by the CAN …\nCAN_TXD pin is driven LOW/dominant\nNormal operation\nThe CAN bus is recessive (CAN_RXD = 1)\nBit 7 - Monitors the actual value of the CAN_RXD pin.\nBit 7 - Monitors the actual value of the CAN_RXD pin.\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nBit 3 - Silent mode.\nBit 3 - Silent mode.\nThe module is in silent mode\nBits 5:6 - Control of CAN_TXD pins.\nBits 5:6 - Control of CAN_TXD pins.\nThe sample point can be monitored at the CAN_TXD pin\nIF1 registers used as TX buffer, IF2 registers used as RX …\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nReader of register CANTXREQ1\nReader of field <code>TXRQST_16_1</code>\nBits 0:15 - Transmission request bit of message objects 16 …\nReader of register CANTXREQ2\nReader of field <code>TXRQST_32_17</code>\nBits 0:15 - Transmission request bit of message objects 32 …\nCapture Control Register (CCR). The CCR controls which …\nCapture Register (CR). CR is loaded with the value of TC …\nCount Control Register (CTCR). The CTCR selects between …\nExternal Match Register (EMR). The EMR controls the match …\nInterrupt Register (IR). The IR can be written to clear …\nMatch Control Register (MCR). The MCR is used to control …\nMatch Register. MR can be enabled through the MCR to reset …\nPrescale Counter (PC). The 16-bit PC is a counter which is …\nPrescale Register (PR). When the Prescale Counter (below) …\nPWM Control Register (PWMCON). The PWMCON enables PWM mode …\nRegister block\nTimer Counter (TC). The 16-bit TC is incremented every …\nTimer Control Register (TCR). The TCR is used to control …\nCapture Control Register (CCR). The CCR controls which …\n0x28 - Capture Control Register (CCR). The CCR controls …\nCapture Register (CR). CR is loaded with the value of TC …\n0x2c - Capture Register (CR). CR is loaded with the value …\nCount Control Register (CTCR). The CTCR selects between …\n0x70 - Count Control Register (CTCR). The CTCR selects …\nExternal Match Register (EMR). The EMR controls the match …\n0x3c - External Match Register (EMR). The EMR controls the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInterrupt Register (IR). The IR can be written to clear …\n0x00 - Interrupt Register (IR). The IR can be written to …\nMatch Control Register (MCR). The MCR is used to control …\n0x14 - Match Control Register (MCR). The MCR is used to …\nMatch Register. MR can be enabled through the MCR to reset …\n0x18 - Match Register. MR can be enabled through the MCR …\nPrescale Counter (PC). The 16-bit PC is a counter which is …\n0x10 - Prescale Counter (PC). The 16-bit PC is a counter …\nPrescale Register (PR). When the Prescale Counter (below) …\n0x0c - Prescale Register (PR). When the Prescale Counter …\nPWM Control Register (PWMCON). The PWMCON enables PWM mode …\n0x74 - PWM Control Register (PWMCON). The PWMCON enables …\nTimer Counter (TC). The 16-bit TC is incremented every …\n0x08 - Timer Counter (TC). The 16-bit TC is incremented …\nTimer Control Register (TCR). The TCR is used to control …\n0x04 - Timer Control Register (TCR). The TCR is used to …\nCapture on CT16Bn_CAP0 falling edge: a sequence of 1 then …\nReader of field <code>CAP0FE</code>\nWrite proxy for field <code>CAP0FE</code>\nInterrupt on CT16Bn_CAP0 event: a CR0 load due to a …\nReader of field <code>CAP0I</code>\nWrite proxy for field <code>CAP0I</code>\nCapture on CT16Bn_CAP0 rising edge: a sequence of 0 then 1 …\nReader of field <code>CAP0RE</code>\nWrite proxy for field <code>CAP0RE</code>\nCapture on CT16Bn_CAP1 falling edge: a sequence of 1 then …\nReader of field <code>CAP1FE</code>\nWrite proxy for field <code>CAP1FE</code>\nInterrupt on CT16Bn_CAP1 event: a CR1 load due to a …\nReader of field <code>CAP1I</code>\nWrite proxy for field <code>CAP1I</code>\nCapture on CT16Bn_CAP1 rising edge: a sequence of 0 then 1 …\nReader of field <code>CAP1RE</code>\nWrite proxy for field <code>CAP1RE</code>\n0: Disabled\n0: Disabled\n0: Disabled\n0: Disabled\n0: Disabled\n0: Disabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\nReader of register CCR\nWriter for register CCR\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nBit 1 - Capture on CT16Bn_CAP0 falling edge: a sequence of …\nBit 1 - Capture on CT16Bn_CAP0 falling edge: a sequence of …\nBit 2 - Interrupt on CT16Bn_CAP0 event: a CR0 load due to …\nBit 2 - Interrupt on CT16Bn_CAP0 event: a CR0 load due to …\nBit 0 - Capture on CT16Bn_CAP0 rising edge: a sequence of …\nBit 0 - Capture on CT16Bn_CAP0 rising edge: a sequence of …\nBit 4 - Capture on CT16Bn_CAP1 falling edge: a sequence of …\nBit 4 - Capture on CT16Bn_CAP1 falling edge: a sequence of …\nBit 5 - Interrupt on CT16Bn_CAP1 event: a CR1 load due to …\nBit 5 - Interrupt on CT16Bn_CAP1 event: a CR1 load due to …\nBit 3 - Capture on CT16Bn_CAP1 rising edge: a sequence of …\nBit 3 - Capture on CT16Bn_CAP1 rising edge: a sequence of …\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nDisabled\nDisabled\nDisabled\nDisabled\nDisabled\nDisabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nReader of field <code>CAP</code>\nReader of register CR%s\nBits 0:15 - Timer counter capture value.\nCount Input Select. In counter mode (when bits 1:0 in this …\nReader of field <code>CIS</code>\nWrite proxy for field <code>CIS</code>\n3: Counter Mode: TC is incremented on both edges on the …\n2: Counter Mode: TC is incremented on falling edges on the …\n1: Counter Mode: TC is incremented on rising edges on the …\n0: CT16Bn_CAP0\n1: CT16Bn_CAP1\nCounter/Timer Mode. This field selects which rising PCLK …\nReader of field <code>CTM</code>\nWrite proxy for field <code>CTM</code>\nReader of field <code>ENCC</code>\nWrite proxy for field <code>ENCC</code>\n1: Falling Edge of CAP0 clears the timer (if bit 4 is set)\n3: Falling Edge of CAP1 clears the timer (if bit 4 is set)\nReader of register CTCR\n0: Rising Edge of CAP0 clears the timer (if bit 4 is set)\n2: Rising Edge of CAP1 clears the timer (if bit 4 is set)\nWhen bit 4 is one, these bits select which capture input …\nReader of field <code>SELCC</code>\nWrite proxy for field <code>SELCC</code>\n0: Timer Mode: every rising PCLK edge\nWriter for register CTCR\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nBits 2:3 - Count Input Select. In counter mode (when bits …\nBits 2:3 - Count Input Select. In counter mode (when bits …\nClears the field bit\nCounter Mode: TC is incremented on both edges on the CAP …\nCounter Mode: TC is incremented on falling edges on the …\nCounter Mode: TC is incremented on rising edges on the CAP …\nCT16Bn_CAP0\nCT16Bn_CAP1\nBits 0:1 - Counter/Timer Mode. This field selects which …\nBits 0:1 - Counter/Timer Mode. This field selects which …\nBit 4 - Setting this bit to one enables clearing of the …\nBit 4 - Setting this bit to one enables clearing of the …\nFalling Edge of CAP0 clears the timer (if bit 4 is set)\nFalling Edge of CAP1 clears the timer (if bit 4 is set)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>COUNTER_MODE_TC_IS_BOTH</code>\nChecks if the value of the field is …\nChecks if the value of the field is …\nChecks if the value of the field is <code>CT16BN_CAP0</code>\nChecks if the value of the field is <code>CT16BN_CAP1</code>\nChecks if the value of the field is <code>FALLING_EDGE_OF_CAP0</code>\nChecks if the value of the field is <code>FALLING_EDGE_OF_CAP1</code>\nChecks if the value of the field is <code>RISING_EDGE_OF_CAP0_</code>\nChecks if the value of the field is <code>RISING_EDGE_OF_CAP1_</code>\nChecks if the value of the field is <code>TIMER_MODE_EVERY_RI</code>\nRising Edge of CAP0 clears the timer (if bit 4 is set)\nRising Edge of CAP1 clears the timer (if bit 4 is set)\nBits 5:7 - When bit 4 is one, these bits select which …\nBits 5:7 - When bit 4 is one, these bits select which …\nSets the field bit\nTimer Mode: every rising PCLK edge\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\n1: Clear the corresponding External Match bit/output to 0 …\n1: Clear the corresponding External Match bit/output to 0 …\n1: Clear the corresponding External Match bit/output to 0 …\n1: Clear the corresponding External Match bit/output to 0 …\n0: Do Nothing\n0: Do Nothing\n0: Do Nothing\n0: Do Nothing\nReader of field <code>EM0</code>\nWrite proxy for field <code>EM0</code>\nReader of field <code>EM1</code>\nWrite proxy for field <code>EM1</code>\nReader of field <code>EM2</code>\nWrite proxy for field <code>EM2</code>\nReader of field <code>EM3</code>\nWrite proxy for field <code>EM3</code>\nExternal Match Control 0. Determines the functionality of …\nReader of field <code>EMC0</code>\nWrite proxy for field <code>EMC0</code>\nExternal Match Control 1. Determines the functionality of …\nReader of field <code>EMC1</code>\nWrite proxy for field <code>EMC1</code>\nExternal Match Control 2. Determines the functionality of …\nReader of field <code>EMC2</code>\nWrite proxy for field <code>EMC2</code>\nExternal Match Control 3. Determines the functionality of …\nReader of field <code>EMC3</code>\nWrite proxy for field <code>EMC3</code>\nReader of register EMR\n2: Set the corresponding External Match bit/output to 1 …\n2: Set the corresponding External Match bit/output to 1 …\n2: Set the corresponding External Match bit/output to 1 …\n2: Set the corresponding External Match bit/output to 1 …\n3: Toggle the corresponding External Match bit/output\n3: Toggle the corresponding External Match bit/output\n3: Toggle the corresponding External Match bit/output\n3: Toggle the corresponding External Match bit/output\nWriter for register EMR\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClear the corresponding External Match bit/output to 0 …\nClear the corresponding External Match bit/output to 0 …\nClear the corresponding External Match bit/output to 0 …\nClear the corresponding External Match bit/output to 0 …\nDo Nothing\nDo Nothing\nDo Nothing\nDo Nothing\nBit 0 - External Match 0. This bit reflects the state of …\nBit 0 - External Match 0. This bit reflects the state of …\nBit 1 - External Match 1. This bit reflects the state of …\nBit 1 - External Match 1. This bit reflects the state of …\nBit 2 - External Match 2. This bit reflects the state of …\nBit 2 - External Match 2. This bit reflects the state of …\nBit 3 - External Match 3. This bit reflects the state of …\nBit 3 - External Match 3. This bit reflects the state of …\nBits 4:5 - External Match Control 0. Determines the …\nBits 4:5 - External Match Control 0. Determines the …\nBits 6:7 - External Match Control 1. Determines the …\nBits 6:7 - External Match Control 1. Determines the …\nBits 8:9 - External Match Control 2. Determines the …\nBits 8:9 - External Match Control 2. Determines the …\nBits 10:11 - External Match Control 3. Determines the …\nBits 10:11 - External Match Control 3. Determines the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>CLEAR_THE_CORRESPOND</code>\nChecks if the value of the field is <code>CLEAR_THE_CORRESPOND</code>\nChecks if the value of the field is <code>CLEAR_THE_CORRESPOND</code>\nChecks if the value of the field is <code>CLEAR_THE_CORRESPOND</code>\nChecks if the value of the field is <code>DO_NOTHING_</code>\nChecks if the value of the field is <code>DO_NOTHING_</code>\nChecks if the value of the field is <code>DO_NOTHING_</code>\nChecks if the value of the field is <code>DO_NOTHING_</code>\nChecks if the value of the field is <code>SET_THE_CORRESPONDIN</code>\nChecks if the value of the field is <code>SET_THE_CORRESPONDIN</code>\nChecks if the value of the field is <code>SET_THE_CORRESPONDIN</code>\nChecks if the value of the field is <code>SET_THE_CORRESPONDIN</code>\nChecks if the value of the field is <code>TOGGLE_THE_CORRESPON</code>\nChecks if the value of the field is <code>TOGGLE_THE_CORRESPON</code>\nChecks if the value of the field is <code>TOGGLE_THE_CORRESPON</code>\nChecks if the value of the field is <code>TOGGLE_THE_CORRESPON</code>\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSet the corresponding External Match bit/output to 1 …\nSet the corresponding External Match bit/output to 1 …\nSet the corresponding External Match bit/output to 1 …\nSet the corresponding External Match bit/output to 1 …\nToggle the corresponding External Match bit/output\nToggle the corresponding External Match bit/output\nToggle the corresponding External Match bit/output\nToggle the corresponding External Match bit/output\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nReader of field <code>CR0INT</code>\nWrite proxy for field <code>CR0INT</code>\nReader of field <code>CR1INT</code>\nWrite proxy for field <code>CR1INT</code>\nReader of field <code>MR0INT</code>\nWrite proxy for field <code>MR0INT</code>\nReader of field <code>MR1INT</code>\nWrite proxy for field <code>MR1INT</code>\nReader of field <code>MR2INT</code>\nWrite proxy for field <code>MR2INT</code>\nReader of field <code>MR3INT</code>\nWrite proxy for field <code>MR3INT</code>\nReader of register IR\nWriter for register IR\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nBit 4 - Interrupt flag for capture channel 0 event.\nBit 4 - Interrupt flag for capture channel 0 event.\nBit 5 - Interrupt flag for capture channel 1 event.\nBit 5 - Interrupt flag for capture channel 1 event.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0 - Interrupt flag for match channel 0.\nBit 0 - Interrupt flag for match channel 0.\nBit 1 - Interrupt flag for match channel 1.\nBit 1 - Interrupt flag for match channel 1.\nBit 2 - Interrupt flag for match channel 2.\nBit 2 - Interrupt flag for match channel 2.\nBit 3 - Interrupt flag for match channel 3.\nBit 3 - Interrupt flag for match channel 3.\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\n0: Disabled\n0: Disabled\n0: Disabled\n0: Disabled\n0: Disabled\n0: Disabled\n0: Disabled\n0: Disabled\n0: Disabled\n0: Disabled\n0: Disabled\n0: Disabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\nInterrupt on MR0: an interrupt is generated when MR0 …\nReader of field <code>MR0I</code>\nWrite proxy for field <code>MR0I</code>\nReset on MR0: the TC will be reset if MR0 matches it.\nReader of field <code>MR0R</code>\nWrite proxy for field <code>MR0R</code>\nStop on MR0: the TC and PC will be stopped and TCR[0] will …\nReader of field <code>MR0S</code>\nWrite proxy for field <code>MR0S</code>\nInterrupt on MR1: an interrupt is generated when MR1 …\nReader of field <code>MR1I</code>\nWrite proxy for field <code>MR1I</code>\nReset on MR1: the TC will be reset if MR1 matches it.\nReader of field <code>MR1R</code>\nWrite proxy for field <code>MR1R</code>\nStop on MR1: the TC and PC will be stopped and TCR[0] will …\nReader of field <code>MR1S</code>\nWrite proxy for field <code>MR1S</code>\nInterrupt on MR2: an interrupt is generated when MR2 …\nReader of field <code>MR2I</code>\nWrite proxy for field <code>MR2I</code>\nReset on MR2: the TC will be reset if MR2 matches it.\nReader of field <code>MR2R</code>\nWrite proxy for field <code>MR2R</code>\nStop on MR2: the TC and PC will be stopped and TCR[0] will …\nReader of field <code>MR2S</code>\nWrite proxy for field <code>MR2S</code>\nInterrupt on MR3: an interrupt is generated when MR3 …\nReader of field <code>MR3I</code>\nWrite proxy for field <code>MR3I</code>\nReset on MR3: the TC will be reset if MR3 matches it.\nReader of field <code>MR3R</code>\nWrite proxy for field <code>MR3R</code>\nStop on MR3: the TC and PC will be stopped and TCR[0] will …\nReader of field <code>MR3S</code>\nWrite proxy for field <code>MR3S</code>\nReader of register MCR\nWriter for register MCR\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nDisabled\nDisabled\nDisabled\nDisabled\nDisabled\nDisabled\nDisabled\nDisabled\nDisabled\nDisabled\nDisabled\nDisabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nBit 0 - Interrupt on MR0: an interrupt is generated when …\nBit 0 - Interrupt on MR0: an interrupt is generated when …\nBit 1 - Reset on MR0: the TC will be reset if MR0 matches …\nBit 1 - Reset on MR0: the TC will be reset if MR0 matches …\nBit 2 - Stop on MR0: the TC and PC will be stopped and TCR…\nBit 2 - Stop on MR0: the TC and PC will be stopped and TCR…\nBit 3 - Interrupt on MR1: an interrupt is generated when …\nBit 3 - Interrupt on MR1: an interrupt is generated when …\nBit 4 - Reset on MR1: the TC will be reset if MR1 matches …\nBit 4 - Reset on MR1: the TC will be reset if MR1 matches …\nBit 5 - Stop on MR1: the TC and PC will be stopped and TCR…\nBit 5 - Stop on MR1: the TC and PC will be stopped and TCR…\nBit 6 - Interrupt on MR2: an interrupt is generated when …\nBit 6 - Interrupt on MR2: an interrupt is generated when …\nBit 7 - Reset on MR2: the TC will be reset if MR2 matches …\nBit 7 - Reset on MR2: the TC will be reset if MR2 matches …\nBit 8 - Stop on MR2: the TC and PC will be stopped and TCR…\nBit 8 - Stop on MR2: the TC and PC will be stopped and TCR…\nBit 9 - Interrupt on MR3: an interrupt is generated when …\nBit 9 - Interrupt on MR3: an interrupt is generated when …\nBit 10 - Reset on MR3: the TC will be reset if MR3 matches …\nBit 10 - Reset on MR3: the TC will be reset if MR3 matches …\nBit 11 - Stop on MR3: the TC and PC will be stopped and TCR…\nBit 11 - Stop on MR3: the TC and PC will be stopped and TCR…\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nReader of field <code>MATCH</code>\nWrite proxy for field <code>MATCH</code>\nReader of register MR%s\nWriter for register MR%s\nWrites raw bits to the field\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBits 0:15 - Timer counter match value.\nBits 0:15 - Timer counter match value.\nReader of field <code>PC</code>\nWrite proxy for field <code>PC</code>\nReader of register PC\nWriter for register PC\nWrites raw bits to the field\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBits 0:15 - Prescale counter value.\nBits 0:15 - Prescale counter value.\nReader of field <code>PR</code>\nWrite proxy for field <code>PR</code>\nReader of register PR\nWriter for register PR\nWrites raw bits to the field\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBits 0:15 - Prescale max value.\nBits 0:15 - Prescale max value.\n0: CT16Bn_MAT0 is controlled by EM0\n0: CT16Bn_MAT1 is controlled by EM1\n0: Match channel 2 or pin CT16B0_MAT2 is controlled by …\n0: Match channel 3 match channel 3 is controlled by EM3\nPWM channel0 enable.\nReader of field <code>PWMEN0</code>\nWrite proxy for field <code>PWMEN0</code>\nPWM channel1 enable.\nReader of field <code>PWMEN1</code>\nWrite proxy for field <code>PWMEN1</code>\nPWM channel2 enable.\nReader of field <code>PWMEN2</code>\nWrite proxy for field <code>PWMEN2</code>\nPWM channel3 enable Note: It is recommended to use match …\nReader of field <code>PWMEN3</code>\nWrite proxy for field <code>PWMEN3</code>\n1: PWM mode is enabled for CT16Bn_MAT0\n1: PWM mode is enabled for CT16Bn_MAT1\n1: PWM mode is enabled for match channel 2 or pin …\n1: PWM mode is enabled for match channel 3match channel 3\nReader of register PWMC\nWriter for register PWMC\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nCT16Bn_MAT0 is controlled by EM0\nCT16Bn_MAT1 is controlled by EM1\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>CT16BN_MAT0_IS_CONTR</code>\nChecks if the value of the field is <code>CT16BN_MAT1_IS_CONTR</code>\nChecks if the value of the field is <code>MATCH_CHANNEL_2_OR_P</code>\nChecks if the value of the field is <code>MATCH_CHANNEL_3_MATC</code>\nChecks if the value of the field is <code>PWM_MODE_IS_ENABLED_</code>\nChecks if the value of the field is <code>PWM_MODE_IS_ENABLED_</code>\nChecks if the value of the field is <code>PWM_MODE_IS_ENABLED_</code>\nChecks if the value of the field is <code>PWM_MODE_IS_ENABLED_</code>\nMatch channel 2 or pin CT16B0_MAT2 is controlled by EM2. …\nMatch channel 3 match channel 3 is controlled by EM3\nPWM mode is enabled for CT16Bn_MAT0\nPWM mode is enabled for CT16Bn_MAT1\nPWM mode is enabled for match channel 2 or pin CT16B0_MAT2\nPWM mode is enabled for match channel 3match channel 3\nBit 0 - PWM channel0 enable.\nBit 0 - PWM channel0 enable.\nBit 1 - PWM channel1 enable.\nBit 1 - PWM channel1 enable.\nBit 2 - PWM channel2 enable.\nBit 2 - PWM channel2 enable.\nBit 3 - PWM channel3 enable Note: It is recommended to use …\nBit 3 - PWM channel3 enable Note: It is recommended to use …\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nReader of register TC\nReader of field <code>TC</code>\nWrite proxy for field <code>TC</code>\nWriter for register TC\nWrites raw bits to the field\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBits 0:15 - Timer counter value.\nBits 0:15 - Timer counter value.\nReader of field <code>CEN</code>\nWrite proxy for field <code>CEN</code>\nReader of field <code>CRST</code>\nWrite proxy for field <code>CRST</code>\nReader of register TCR\nWriter for register TCR\nWrites raw bits to the field\nWrites raw bits to the field\nBit 0 - Counter Enable. When one, the Timer Counter and …\nBit 0 - Counter Enable. When one, the Timer Counter and …\nClears the field bit\nClears the field bit\nBit 1 - Counter Reset. When one, the Timer Counter and the …\nBit 1 - Counter Reset. When one, the Timer Counter and the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the field bit\nSets the field bit\nCapture Control Register (CCR). The CCR controls which …\nCapture Register (CR). CR is loaded with the value of TC …\nCount Control Register (CTCR). The CTCR selects between …\nExternal Match Register (EMR). The EMR controls the match …\nInterrupt Register (IR). The IR can be written to clear …\nMatch Control Register (MCR). The MCR is used to control …\nMatch Register. MR can be enabled through the MCR to reset …\nPrescale Counter (PC). The 32-bit PC is a counter which is …\nPrescale Register (PR). When the Prescale Counter (below) …\nPWM Control Register (PWMCON). The PWMCON enables PWM mode …\nRegister block\nTimer Counter (TC). The 32-bit TC is incremented every …\nTimer Control Register (TCR). The TCR is used to control …\nCapture Control Register (CCR). The CCR controls which …\n0x28 - Capture Control Register (CCR). The CCR controls …\nCapture Register (CR). CR is loaded with the value of TC …\n0x2c - Capture Register (CR). CR is loaded with the value …\nCount Control Register (CTCR). The CTCR selects between …\n0x70 - Count Control Register (CTCR). The CTCR selects …\nExternal Match Register (EMR). The EMR controls the match …\n0x3c - External Match Register (EMR). The EMR controls the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInterrupt Register (IR). The IR can be written to clear …\n0x00 - Interrupt Register (IR). The IR can be written to …\nMatch Control Register (MCR). The MCR is used to control …\n0x14 - Match Control Register (MCR). The MCR is used to …\nMatch Register. MR can be enabled through the MCR to reset …\n0x18 - Match Register. MR can be enabled through the MCR …\nPrescale Counter (PC). The 32-bit PC is a counter which is …\n0x10 - Prescale Counter (PC). The 32-bit PC is a counter …\nPrescale Register (PR). When the Prescale Counter (below) …\n0x0c - Prescale Register (PR). When the Prescale Counter …\nPWM Control Register (PWMCON). The PWMCON enables PWM mode …\n0x74 - PWM Control Register (PWMCON). The PWMCON enables …\nTimer Counter (TC). The 32-bit TC is incremented every …\n0x08 - Timer Counter (TC). The 32-bit TC is incremented …\nTimer Control Register (TCR). The TCR is used to control …\n0x04 - Timer Control Register (TCR). The TCR is used to …\nCapture on CT32Bn_CAP0 falling edge: a sequence of 1 then …\nReader of field <code>CAP0FE</code>\nWrite proxy for field <code>CAP0FE</code>\nInterrupt on CT32Bn_CAP0 event: a CR0 load due to a …\nReader of field <code>CAP0I</code>\nWrite proxy for field <code>CAP0I</code>\nCapture on CT32Bn_CAP0 rising edge: a sequence of 0 then 1 …\nReader of field <code>CAP0RE</code>\nWrite proxy for field <code>CAP0RE</code>\nCapture on CT32Bn_CAP1 falling edge: a sequence of 1 then …\nReader of field <code>CAP1FE</code>\nWrite proxy for field <code>CAP1FE</code>\nInterrupt on CT32Bn_CAP1 event: a CR1 load due to a …\nReader of field <code>CAP1I</code>\nWrite proxy for field <code>CAP1I</code>\nCapture on CT32Bn_CAP1 rising edge: a sequence of 0 then 1 …\nReader of field <code>CAP1RE</code>\nWrite proxy for field <code>CAP1RE</code>\n0: Disabled\n0: Disabled\n0: Disabled\n0: Disabled\n0: Disabled\n0: Disabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\nReader of register CCR\nWriter for register CCR\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nBit 1 - Capture on CT32Bn_CAP0 falling edge: a sequence of …\nBit 1 - Capture on CT32Bn_CAP0 falling edge: a sequence of …\nBit 2 - Interrupt on CT32Bn_CAP0 event: a CR0 load due to …\nBit 2 - Interrupt on CT32Bn_CAP0 event: a CR0 load due to …\nBit 0 - Capture on CT32Bn_CAP0 rising edge: a sequence of …\nBit 0 - Capture on CT32Bn_CAP0 rising edge: a sequence of …\nBit 4 - Capture on CT32Bn_CAP1 falling edge: a sequence of …\nBit 4 - Capture on CT32Bn_CAP1 falling edge: a sequence of …\nBit 5 - Interrupt on CT32Bn_CAP1 event: a CR1 load due to …\nBit 5 - Interrupt on CT32Bn_CAP1 event: a CR1 load due to …\nBit 3 - Capture on CT32Bn_CAP1 rising edge: a sequence of …\nBit 3 - Capture on CT32Bn_CAP1 rising edge: a sequence of …\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nDisabled\nDisabled\nDisabled\nDisabled\nDisabled\nDisabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nReader of field <code>CAP</code>\nReader of register CR%s\nBits 0:31 - Timer counter capture value.\nCount Input Select. When bits 1:0 in this register are not …\nReader of field <code>CIS</code>\nWrite proxy for field <code>CIS</code>\n3: Counter Mode: TC is incremented on both edges on the …\n2: Counter Mode: TC is incremented on falling edges on the …\n1: Counter Mode: TC is incremented on rising edges on the …\n0: CT32Bn_CAP0\n1: CT32Bn_CAP1\nCounter/Timer Mode. This field selects which rising PCLK …\nReader of field <code>CTM</code>\nWrite proxy for field <code>CTM</code>\nReader of field <code>ENCC</code>\nWrite proxy for field <code>ENCC</code>\n1: Falling Edge of CAP0 clears the timer (if bit 4 is set)\n3: Falling Edge of CAP1 clears the timer (if bit 4 is set)\nReader of register CTCR\n3: Reserved Note: If Counter mode is selected in the …\n0: Rising Edge of CAP0 clears the timer (if bit 4 is set)\n2: Rising Edge of CAP1 clears the timer (if bit 4 is set)\nWhen bit 4 is one, these bits select which capture input …\nReader of field <code>SELCC</code>\nWrite proxy for field <code>SELCC</code>\n0: Timer Mode: every rising PCLK edge\nWriter for register CTCR\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nBits 2:3 - Count Input Select. When bits 1:0 in this …\nBits 2:3 - Count Input Select. When bits 1:0 in this …\nClears the field bit\nCounter Mode: TC is incremented on both edges on the CAP …\nCounter Mode: TC is incremented on falling edges on the …\nCounter Mode: TC is incremented on rising edges on the CAP …\nCT32Bn_CAP0\nCT32Bn_CAP1\nBits 0:1 - Counter/Timer Mode. This field selects which …\nBits 0:1 - Counter/Timer Mode. This field selects which …\nBit 4 - Setting this bit to one enables clearing of the …\nBit 4 - Setting this bit to one enables clearing of the …\nFalling Edge of CAP0 clears the timer (if bit 4 is set)\nFalling Edge of CAP1 clears the timer (if bit 4 is set)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>COUNTER_MODE_TC_IS_BOTH</code>\nChecks if the value of the field is …\nChecks if the value of the field is …\nChecks if the value of the field is <code>CT32BN_CAP0</code>\nChecks if the value of the field is <code>CT32BN_CAP1</code>\nChecks if the value of the field is <code>FALLING_EDGE_OF_CAP0</code>\nChecks if the value of the field is <code>FALLING_EDGE_OF_CAP1</code>\nChecks if the value of the field is <code>RESERVED_NOTE_IF_CO</code>\nChecks if the value of the field is <code>RISING_EDGE_OF_CAP0_</code>\nChecks if the value of the field is <code>RISING_EDGE_OF_CAP1_</code>\nChecks if the value of the field is <code>TIMER_MODE_EVERY_RI</code>\nReserved Note: If Counter mode is selected in the TnCTCR, …\nRising Edge of CAP0 clears the timer (if bit 4 is set)\nRising Edge of CAP1 clears the timer (if bit 4 is set)\nBits 5:7 - When bit 4 is one, these bits select which …\nBits 5:7 - When bit 4 is one, these bits select which …\nSets the field bit\nTimer Mode: every rising PCLK edge\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\n1: Clear the corresponding External Match bit/output to 0 …\n1: Clear the corresponding External Match bit/output to 0 …\n1: Clear the corresponding External Match bit/output to 0 …\n1: Clear the corresponding External Match bit/output to 0 …\n0: Do Nothing\n0: Do Nothing\n0: Do Nothing\n0: Do Nothing\nReader of field <code>EM0</code>\nWrite proxy for field <code>EM0</code>\nReader of field <code>EM1</code>\nWrite proxy for field <code>EM1</code>\nReader of field <code>EM2</code>\nWrite proxy for field <code>EM2</code>\nReader of field <code>EM3</code>\nWrite proxy for field <code>EM3</code>\nExternal Match Control 0. Determines the functionality of …\nReader of field <code>EMC0</code>\nWrite proxy for field <code>EMC0</code>\nExternal Match Control 1. Determines the functionality of …\nReader of field <code>EMC1</code>\nWrite proxy for field <code>EMC1</code>\nExternal Match Control 2. Determines the functionality of …\nReader of field <code>EMC2</code>\nWrite proxy for field <code>EMC2</code>\nExternal Match Control 3. Determines the functionality of …\nReader of field <code>EMC3</code>\nWrite proxy for field <code>EMC3</code>\nReader of register EMR\n2: Set the corresponding External Match bit/output to 1 …\n2: Set the corresponding External Match bit/output to 1 …\n2: Set the corresponding External Match bit/output to 1 …\n2: Set the corresponding External Match bit/output to 1 …\n3: Toggle the corresponding External Match bit/output\n3: Toggle the corresponding External Match bit/output\n3: Toggle the corresponding External Match bit/output\n3: Toggle the corresponding External Match bit/output\nWriter for register EMR\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClear the corresponding External Match bit/output to 0 …\nClear the corresponding External Match bit/output to 0 …\nClear the corresponding External Match bit/output to 0 …\nClear the corresponding External Match bit/output to 0 …\nDo Nothing\nDo Nothing\nDo Nothing\nDo Nothing\nBit 0 - External Match 0. This bit reflects the state of …\nBit 0 - External Match 0. This bit reflects the state of …\nBit 1 - External Match 1. This bit reflects the state of …\nBit 1 - External Match 1. This bit reflects the state of …\nBit 2 - External Match 2. This bit reflects the state of …\nBit 2 - External Match 2. This bit reflects the state of …\nBit 3 - External Match 3. This bit reflects the state of …\nBit 3 - External Match 3. This bit reflects the state of …\nBits 4:5 - External Match Control 0. Determines the …\nBits 4:5 - External Match Control 0. Determines the …\nBits 6:7 - External Match Control 1. Determines the …\nBits 6:7 - External Match Control 1. Determines the …\nBits 8:9 - External Match Control 2. Determines the …\nBits 8:9 - External Match Control 2. Determines the …\nBits 10:11 - External Match Control 3. Determines the …\nBits 10:11 - External Match Control 3. Determines the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>CLEAR_THE_CORRESPOND</code>\nChecks if the value of the field is <code>CLEAR_THE_CORRESPOND</code>\nChecks if the value of the field is <code>CLEAR_THE_CORRESPOND</code>\nChecks if the value of the field is <code>CLEAR_THE_CORRESPOND</code>\nChecks if the value of the field is <code>DO_NOTHING_</code>\nChecks if the value of the field is <code>DO_NOTHING_</code>\nChecks if the value of the field is <code>DO_NOTHING_</code>\nChecks if the value of the field is <code>DO_NOTHING_</code>\nChecks if the value of the field is <code>SET_THE_CORRESPONDIN</code>\nChecks if the value of the field is <code>SET_THE_CORRESPONDIN</code>\nChecks if the value of the field is <code>SET_THE_CORRESPONDIN</code>\nChecks if the value of the field is <code>SET_THE_CORRESPONDIN</code>\nChecks if the value of the field is <code>TOGGLE_THE_CORRESPON</code>\nChecks if the value of the field is <code>TOGGLE_THE_CORRESPON</code>\nChecks if the value of the field is <code>TOGGLE_THE_CORRESPON</code>\nChecks if the value of the field is <code>TOGGLE_THE_CORRESPON</code>\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSet the corresponding External Match bit/output to 1 …\nSet the corresponding External Match bit/output to 1 …\nSet the corresponding External Match bit/output to 1 …\nSet the corresponding External Match bit/output to 1 …\nToggle the corresponding External Match bit/output\nToggle the corresponding External Match bit/output\nToggle the corresponding External Match bit/output\nToggle the corresponding External Match bit/output\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nReader of field <code>CR0INT</code>\nWrite proxy for field <code>CR0INT</code>\nReader of field <code>CR1INT</code>\nWrite proxy for field <code>CR1INT</code>\nReader of field <code>MR0INT</code>\nWrite proxy for field <code>MR0INT</code>\nReader of field <code>MR1INT</code>\nWrite proxy for field <code>MR1INT</code>\nReader of field <code>MR2INT</code>\nWrite proxy for field <code>MR2INT</code>\nReader of field <code>MR3INT</code>\nWrite proxy for field <code>MR3INT</code>\nReader of register IR\nWriter for register IR\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nBit 4 - Interrupt flag for capture channel 0 event.\nBit 4 - Interrupt flag for capture channel 0 event.\nBit 5 - Interrupt flag for capture channel 1 event.\nBit 5 - Interrupt flag for capture channel 1 event.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0 - Interrupt flag for match channel 0.\nBit 0 - Interrupt flag for match channel 0.\nBit 1 - Interrupt flag for match channel 1.\nBit 1 - Interrupt flag for match channel 1.\nBit 2 - Interrupt flag for match channel 2.\nBit 2 - Interrupt flag for match channel 2.\nBit 3 - Interrupt flag for match channel 3.\nBit 3 - Interrupt flag for match channel 3.\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\n0: Disabled\n0: Disabled\n0: Disabled\n0: Disabled\n0: Disabled\n0: Disabled\n0: Disabled\n0: Disabled\n0: Disabled\n0: Disabled\n0: Disabled\n0: Disabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\n1: Enabled\nInterrupt on MR0: an interrupt is generated when MR0 …\nReader of field <code>MR0I</code>\nWrite proxy for field <code>MR0I</code>\nReset on MR0: the TC will be reset if MR0 matches it.\nReader of field <code>MR0R</code>\nWrite proxy for field <code>MR0R</code>\nStop on MR0: the TC and PC will be stopped and TCR[0] will …\nReader of field <code>MR0S</code>\nWrite proxy for field <code>MR0S</code>\nInterrupt on MR1: an interrupt is generated when MR1 …\nReader of field <code>MR1I</code>\nWrite proxy for field <code>MR1I</code>\nReset on MR1: the TC will be reset if MR1 matches it.\nReader of field <code>MR1R</code>\nWrite proxy for field <code>MR1R</code>\nStop on MR1: the TC and PC will be stopped and TCR[0] will …\nReader of field <code>MR1S</code>\nWrite proxy for field <code>MR1S</code>\nInterrupt on MR2: an interrupt is generated when MR2 …\nReader of field <code>MR2I</code>\nWrite proxy for field <code>MR2I</code>\nReset on MR2: the TC will be reset if MR2 matches it.\nReader of field <code>MR2R</code>\nWrite proxy for field <code>MR2R</code>\nStop on MR2: the TC and PC will be stopped and TCR[0] will …\nReader of field <code>MR2S</code>\nWrite proxy for field <code>MR2S</code>\nInterrupt on MR3: an interrupt is generated when MR3 …\nReader of field <code>MR3I</code>\nWrite proxy for field <code>MR3I</code>\nReset on MR3: the TC will be reset if MR3 matches it.\nReader of field <code>MR3R</code>\nWrite proxy for field <code>MR3R</code>\nStop on MR3: the TC and PC will be stopped and TCR[0] will …\nReader of field <code>MR3S</code>\nWrite proxy for field <code>MR3S</code>\nReader of register MCR\nWriter for register MCR\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nDisabled\nDisabled\nDisabled\nDisabled\nDisabled\nDisabled\nDisabled\nDisabled\nDisabled\nDisabled\nDisabled\nDisabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nEnabled\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nBit 0 - Interrupt on MR0: an interrupt is generated when …\nBit 0 - Interrupt on MR0: an interrupt is generated when …\nBit 1 - Reset on MR0: the TC will be reset if MR0 matches …\nBit 1 - Reset on MR0: the TC will be reset if MR0 matches …\nBit 2 - Stop on MR0: the TC and PC will be stopped and TCR…\nBit 2 - Stop on MR0: the TC and PC will be stopped and TCR…\nBit 3 - Interrupt on MR1: an interrupt is generated when …\nBit 3 - Interrupt on MR1: an interrupt is generated when …\nBit 4 - Reset on MR1: the TC will be reset if MR1 matches …\nBit 4 - Reset on MR1: the TC will be reset if MR1 matches …\nBit 5 - Stop on MR1: the TC and PC will be stopped and TCR…\nBit 5 - Stop on MR1: the TC and PC will be stopped and TCR…\nBit 6 - Interrupt on MR2: an interrupt is generated when …\nBit 6 - Interrupt on MR2: an interrupt is generated when …\nBit 7 - Reset on MR2: the TC will be reset if MR2 matches …\nBit 7 - Reset on MR2: the TC will be reset if MR2 matches …\nBit 8 - Stop on MR2: the TC and PC will be stopped and TCR…\nBit 8 - Stop on MR2: the TC and PC will be stopped and TCR…\nBit 9 - Interrupt on MR3: an interrupt is generated when …\nBit 9 - Interrupt on MR3: an interrupt is generated when …\nBit 10 - Reset on MR3: the TC will be reset if MR3 matches …\nBit 10 - Reset on MR3: the TC will be reset if MR3 matches …\nBit 11 - Stop on MR3: the TC and PC will be stopped and TCR…\nBit 11 - Stop on MR3: the TC and PC will be stopped and TCR…\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nReader of field <code>MATCH</code>\nWrite proxy for field <code>MATCH</code>\nReader of register MR%s\nWriter for register MR%s\nWrites raw bits to the field\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBits 0:31 - Timer counter match value.\nBits 0:31 - Timer counter match value.\nReader of field <code>PC</code>\nWrite proxy for field <code>PC</code>\nReader of register PC\nWriter for register PC\nWrites raw bits to the field\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBits 0:31 - Prescale counter value.\nBits 0:31 - Prescale counter value.\nReader of field <code>PR</code>\nWrite proxy for field <code>PR</code>\nReader of register PR\nWriter for register PR\nWrites raw bits to the field\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBits 0:31 - Prescale value.\nBits 0:31 - Prescale value.\n0: CT32Bn_MAT0 is controlled by EM0\n0: CT32Bn_MAT1 is controlled by EM1\n0: CT32Bn_MAT2 is controlled by EM2\n0: CT32Bn_MAT3 is controlled by EM3\nPWM channel 0 enable.\nReader of field <code>PWMEN0</code>\nWrite proxy for field <code>PWMEN0</code>\nPWM channel 1 enable.\nReader of field <code>PWMEN1</code>\nWrite proxy for field <code>PWMEN1</code>\nPWM channel 2 enable.\nReader of field <code>PWMEN2</code>\nWrite proxy for field <code>PWMEN2</code>\nPWM channel 3 enable Note: It is recommended to use match …\nReader of field <code>PWMEN3</code>\nWrite proxy for field <code>PWMEN3</code>\n1: PWM mode is enabled for CT32Bn_MAT0\n1: PWM mode is enabled for CT32Bn_MAT1\n1: PWM mode is enabled for CT32Bn_MAT2\n1: PWM mode is enabled for CT32Bn_MAT3\nReader of register PWMC\nWriter for register PWMC\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nCT32Bn_MAT0 is controlled by EM0\nCT32Bn_MAT1 is controlled by EM1\nCT32Bn_MAT2 is controlled by EM2\nCT32Bn_MAT3 is controlled by EM3\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>CT32BN_MAT0_IS_CONTR</code>\nChecks if the value of the field is <code>CT32BN_MAT1_IS_CONTR</code>\nChecks if the value of the field is <code>CT32BN_MAT2_IS_CONTR</code>\nChecks if the value of the field is <code>CT32BN_MAT3_IS_CONTR</code>\nChecks if the value of the field is <code>PWM_MODE_IS_ENABLED_</code>\nChecks if the value of the field is <code>PWM_MODE_IS_ENABLED_</code>\nChecks if the value of the field is <code>PWM_MODE_IS_ENABLED_</code>\nChecks if the value of the field is <code>PWM_MODE_IS_ENABLED_</code>\nPWM mode is enabled for CT32Bn_MAT0\nPWM mode is enabled for CT32Bn_MAT1\nPWM mode is enabled for CT32Bn_MAT2\nPWM mode is enabled for CT32Bn_MAT3\nBit 0 - PWM channel 0 enable.\nBit 0 - PWM channel 0 enable.\nBit 1 - PWM channel 1 enable.\nBit 1 - PWM channel 1 enable.\nBit 2 - PWM channel 2 enable.\nBit 2 - PWM channel 2 enable.\nBit 3 - PWM channel 3 enable Note: It is recommended to …\nBit 3 - PWM channel 3 enable Note: It is recommended to …\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nReader of register TC\nReader of field <code>TC</code>\nWrite proxy for field <code>TC</code>\nWriter for register TC\nWrites raw bits to the field\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBits 0:31 - Timer counter value.\nBits 0:31 - Timer counter value.\nReader of field <code>CEN</code>\nWrite proxy for field <code>CEN</code>\nReader of field <code>CRST</code>\nWrite proxy for field <code>CRST</code>\nReader of register TCR\nWriter for register TCR\nWrites raw bits to the field\nWrites raw bits to the field\nBit 0 - When one, the Timer Counter and Prescale Counter …\nBit 0 - When one, the Timer Counter and Prescale Counter …\nClears the field bit\nClears the field bit\nBit 1 - When one, the Timer Counter and the Prescale …\nBit 1 - When one, the Timer Counter and the Prescale …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the field bit\nSets the field bit\nFlash memory access time configuration register\nSignature start address register\nSignature stop-address register\nSignature generation status register\nSignature generation status clear register\nWord 0 [31:0]\nWord 1 [63:32]\nWord 2 [95:64]\nWord 3 [127:96]\nRegister block\nFlash memory access time configuration register\n0x10 - Flash memory access time configuration register\nSignature start address register\n0x20 - Signature start address register\nSignature stop-address register\n0x24 - Signature stop-address register\nSignature generation status register\n0xfe0 - Signature generation status register\nSignature generation status clear register\n0xfe8 - Signature generation status clear register\nWord 0 [31:0]\n0x2c - Word 0 [31:0]\nWord 1 [63:32]\n0x30 - Word 1 [63:32]\nWord 2 [95:64]\n0x34 - Word 2 [95:64]\nWord 3 [127:96]\n0x38 - Word 3 [127:96]\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFlash memory access time. FLASHTIM +1 is equal to the …\nReader of field <code>FLASHTIM</code>\nWrite proxy for field <code>FLASHTIM</code>\nReader of register FLASHCFG\nWriter for register FLASHCFG\n1: 1 system clock flash access time (for system clock …\n1 system clock flash access time (for system clock …\n2: 2 system clocks flash access time (for system clock …\n2 system clocks flash access time (for system clock …\n3: 3 system clocks flash access time (for system clock …\n3 system clocks flash access time (for system clock …\nWrites raw bits to the field\nBits 0:1 - Flash memory access time. FLASHTIM +1 is equal …\nBits 0:1 - Flash memory access time. FLASHTIM +1 is equal …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>_1_SYSTEM_CLOCK_FLASH</code>\nChecks if the value of the field is <code>_2_SYSTEM_CLOCKS_FLAS</code>\nChecks if the value of the field is <code>_3_SYSTEM_CLOCKS_FLAS</code>\nGet enumerated values variant\nWrites <code>variant</code> to the field\nReader of register FMSSTART\nReader of field <code>START</code>\nWrite proxy for field <code>START</code>\nWriter for register FMSSTART\nWrites raw bits to the field\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBits 0:16 - Signature generation start address …\nBits 0:16 - Signature generation start address …")
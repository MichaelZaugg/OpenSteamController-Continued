searchState.loadedDescShard("lpc11xx", 4, "Bit 4 - ADC power-down.\nBit 4 - ADC power-down.\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nBit 3 - BOD power-down.\nBit 3 - BOD power-down.\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nBit 2 - Flash power-down.\nBit 2 - Flash power-down.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 1 - IRC oscillator power-down.\nBit 1 - IRC oscillator power-down.\nBit 0 - IRC oscillator output power-down.\nBit 0 - IRC oscillator output power-down.\nChecks if the value of the field is <code>POWERED</code>\nChecks if the value of the field is <code>POWERED</code>\nChecks if the value of the field is <code>POWERED</code>\nChecks if the value of the field is <code>POWERED</code>\nChecks if the value of the field is <code>POWERED</code>\nChecks if the value of the field is <code>POWERED</code>\nChecks if the value of the field is <code>POWERED</code>\nChecks if the value of the field is <code>POWERED</code>\nChecks if the value of the field is <code>POWERED_DOWN</code>\nChecks if the value of the field is <code>POWERED_DOWN</code>\nChecks if the value of the field is <code>POWERED_DOWN</code>\nChecks if the value of the field is <code>POWERED_DOWN</code>\nChecks if the value of the field is <code>POWERED_DOWN</code>\nChecks if the value of the field is <code>POWERED_DOWN</code>\nChecks if the value of the field is <code>POWERED_DOWN</code>\nChecks if the value of the field is <code>POWERED_DOWN</code>\nBit 8 - Reserved. Always write this bit as 1.\nBit 8 - Reserved. Always write this bit as 1.\nBit 9 - Reserved. Always write this bit as 0.\nBit 9 - Reserved. Always write this bit as 0.\nBit 10 - Reserved. Always write this bit as 1.\nBit 10 - Reserved. Always write this bit as 1.\nBit 11 - Reserved. Always write this bit as 1.\nBit 11 - Reserved. Always write this bit as 1.\nBit 12 - Reserved. Always write this bit as 0.\nBit 12 - Reserved. Always write this bit as 0.\nBits 13:15 - Reserved. Always write these bits as 111.\nBits 13:15 - Reserved. Always write these bits as 111.\nPowered\nPowered\nPowered\nPowered\nPowered\nPowered\nPowered\nPowered\nPowered down\nPowered down\nPowered down\nPowered down\nPowered down\nPowered down\nPowered down\nPowered down\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nBit 5 - System oscillator power-down.\nBit 5 - System oscillator power-down.\nBit 7 - System PLL power-down.\nBit 7 - System PLL power-down.\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nBit 6 - Watchdog oscillator power-down.\nBit 6 - Watchdog oscillator power-down.\nBOD power-down control in Deep-sleep mode, see Table 40.\nReader of field <code>BOD_PD</code>\nWrite proxy for field <code>BOD_PD</code>\nReader of field <code>NOTUSED0</code>\nWrite proxy for field <code>NOTUSED0</code>\nReader of field <code>NOTUSED1</code>\nWrite proxy for field <code>NOTUSED1</code>\nReader of field <code>NOTUSED2</code>\nWrite proxy for field <code>NOTUSED2</code>\nReader of field <code>NOTUSED3</code>\nWrite proxy for field <code>NOTUSED3</code>\nReader of field <code>NOTUSED4</code>\nWrite proxy for field <code>NOTUSED4</code>\n0: Powered\n0: Powered\n1: Powered down\n1: Powered down\nReader of register PDSLEEPCFG\nWriter for register PDSLEEPCFG\nWatchdog oscillator power control in Deep-sleep mode, see …\nReader of field <code>WDTOSC_PD</code>\nWrite proxy for field <code>WDTOSC_PD</code>\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nBit 3 - BOD power-down control in Deep-sleep mode, see …\nBit 3 - BOD power-down control in Deep-sleep mode, see …\nClears the field bit\nClears the field bit\nClears the field bit\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>POWERED</code>\nChecks if the value of the field is <code>POWERED</code>\nChecks if the value of the field is <code>POWERED_DOWN</code>\nChecks if the value of the field is <code>POWERED_DOWN</code>\nBits 0:2 - Reserved. Always write these bits as 111.\nBits 0:2 - Reserved. Always write these bits as 111.\nBits 4:5 - Reserved. Always write these bits as 11.\nBits 4:5 - Reserved. Always write these bits as 11.\nBit 7 - Reserved. Always write this bit as 1.\nBit 7 - Reserved. Always write this bit as 1.\nBits 8:10 - Reserved. Always write these bits as 000.\nBits 8:10 - Reserved. Always write these bits as 000.\nBits 11:12 - Reserved. Always write these bits as 11.\nBits 11:12 - Reserved. Always write these bits as 11.\nPowered\nPowered\nPowered down\nPowered down\nSets the field bit\nSets the field bit\nSets the field bit\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nBit 6 - Watchdog oscillator power control in Deep-sleep …\nBit 6 - Watchdog oscillator power control in Deep-sleep …\nReader of field <code>CAPPIO0_n</code>\nReader of field <code>CAPPIO1_n</code>\nReader of field <code>CAPPIO2_n</code>\nReader of register PIOPORCAP0\nBits 0:11 - Raw reset status input PIO0_n: PIO0_11 to …\nBits 12:23 - Raw reset status input PIO1_n: PIO1_11 to …\nBits 24:31 - Raw reset status input PIO2_n: PIO2_7 to …\nReader of field <code>CAPPIO2_10</code>\nReader of field <code>CAPPIO2_11</code>\nReader of field <code>CAPPIO2_8</code>\nReader of field <code>CAPPIO2_9</code>\nReader of field <code>CAPPIO3_0</code>\nReader of field <code>CAPPIO3_1</code>\nReader of field <code>CAPPIO3_2</code>\nReader of field <code>CAPPIO3_3</code>\nReader of field <code>CAPPIO3_4</code>\nReader of field <code>CAPPIO3_5</code>\nReader of register PIOPORCAP1\nBit 2 - Raw reset status input PIO2_10.\nBit 3 - Raw reset status input PIO2_11.\nBit 0 - Raw reset status input PIO2_8.\nBit 1 - Raw reset status input PIO2_9.\nBit 4 - Raw reset status input PIO3_0.\nBit 5 - Raw reset status input PIO3_1.\nBit 6 - Raw reset status input PIO3_2.\nBit 7 - Raw reset status input PIO3_3.\nBit 8 - Raw reset status input PIO3_4.\nBit 9 - Raw reset status input PIO3_5.\n1: C_CAN reset de-asserted\n0: Resets the C_CAN peripheral\nC_CAN reset control. See Section 3.1 for part specific …\nReader of field <code>CAN_RST_N</code>\nWrite proxy for field <code>CAN_RST_N</code>\n1: I2C reset de-asserted\n0: Resets the I2C peripheral\nI2C reset control.\nReader of field <code>I2C_RST_N</code>\nWrite proxy for field <code>I2C_RST_N</code>\nReader of register PRESETCTRL\n0: Resets the SPI1 peripheral\n1: SPI1 reset de-asserted\n1: SPI0 reset de-asserted\n0: Resets the SPI0 peripheral\nSPI0 reset control.\nReader of field <code>SSP0_RST_N</code>\nWrite proxy for field <code>SSP0_RST_N</code>\nSPI1 reset control.\nReader of field <code>SSP1_RST_N</code>\nWrite proxy for field <code>SSP1_RST_N</code>\nWriter for register PRESETCTRL\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nBit 3 - C_CAN reset control. See Section 3.1 for part …\nBit 3 - C_CAN reset control. See Section 3.1 for part …\nC_CAN reset de-asserted\nResets the C_CAN peripheral\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBit 1 - I2C reset control.\nBit 1 - I2C reset control.\nI2C reset de-asserted\nResets the I2C peripheral\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>CANNORESET</code>\nChecks if the value of the field is <code>CANRESET</code>\nChecks if the value of the field is <code>I2CNORESET</code>\nChecks if the value of the field is <code>I2CRESET</code>\nChecks if the value of the field is <code>SPI1RESET</code>\nChecks if the value of the field is <code>SPI2NORESET</code>\nChecks if the value of the field is <code>SPIO0NORESET</code>\nChecks if the value of the field is <code>SPIO0RESET</code>\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nResets the SPI1 peripheral\nSPI1 reset de-asserted\nSPI0 reset de-asserted\nResets the SPI0 peripheral\nBit 0 - SPI0 reset control.\nBit 0 - SPI0 reset control.\nBit 2 - SPI1 reset control.\nBit 2 - SPI1 reset control.\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nReader of field <code>DIV</code>\nWrite proxy for field <code>DIV</code>\nReader of register SSP0CLKDIV\nWriter for register SSP0CLKDIV\nWrites raw bits to the field\nBits 0:7 - SPI0_PCLK clock divider values 0: Disable …\nBits 0:7 - SPI0_PCLK clock divider values 0: Disable …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReader of field <code>DIV</code>\nWrite proxy for field <code>DIV</code>\nReader of register SSP1CLKDIV\nWriter for register SSP1CLKDIV\nWrites raw bits to the field\nBits 0:7 - SPI1_PCLK clock divider values 0: Disable …\nBits 0:7 - SPI1_PCLK clock divider values 0: Disable …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReader of field <code>APRPIO0_0</code>\nWrite proxy for field <code>APRPIO0_0</code>\nReader of field <code>APRPIO0_10</code>\nWrite proxy for field <code>APRPIO0_10</code>\nReader of field <code>APRPIO0_11</code>\nWrite proxy for field <code>APRPIO0_11</code>\nReader of field <code>APRPIO0_1</code>\nWrite proxy for field <code>APRPIO0_1</code>\nReader of field <code>APRPIO0_2</code>\nWrite proxy for field <code>APRPIO0_2</code>\nReader of field <code>APRPIO0_3</code>\nWrite proxy for field <code>APRPIO0_3</code>\nReader of field <code>APRPIO0_4</code>\nWrite proxy for field <code>APRPIO0_4</code>\nReader of field <code>APRPIO0_5</code>\nWrite proxy for field <code>APRPIO0_5</code>\nReader of field <code>APRPIO0_6</code>\nWrite proxy for field <code>APRPIO0_6</code>\nReader of field <code>APRPIO0_7</code>\nWrite proxy for field <code>APRPIO0_7</code>\nReader of field <code>APRPIO0_8</code>\nWrite proxy for field <code>APRPIO0_8</code>\nReader of field <code>APRPIO0_9</code>\nWrite proxy for field <code>APRPIO0_9</code>\nReader of field <code>APRPIO1_0</code>\nWrite proxy for field <code>APRPIO1_0</code>\nReader of register STARTAPRP0\nWriter for register STARTAPRP0\nBit 0 - Edge select for start logic input PIO0_n: PIO0_11 …\nBit 0 - Edge select for start logic input PIO0_n: PIO0_11 …\nBit 1 - Edge select for start logic input PIO0_n: PIO0_11 …\nBit 1 - Edge select for start logic input PIO0_n: PIO0_11 …\nBit 10 - Edge select for start logic input PIO0_n: PIO0_11 …\nBit 10 - Edge select for start logic input PIO0_n: PIO0_11 …\nBit 11 - Edge select for start logic input PIO0_n: PIO0_11 …\nBit 11 - Edge select for start logic input PIO0_n: PIO0_11 …\nBit 2 - Edge select for start logic input PIO0_n: PIO0_11 …\nBit 2 - Edge select for start logic input PIO0_n: PIO0_11 …\nBit 3 - Edge select for start logic input PIO0_n: PIO0_11 …\nBit 3 - Edge select for start logic input PIO0_n: PIO0_11 …\nBit 4 - Edge select for start logic input PIO0_n: PIO0_11 …\nBit 4 - Edge select for start logic input PIO0_n: PIO0_11 …\nBit 5 - Edge select for start logic input PIO0_n: PIO0_11 …\nBit 5 - Edge select for start logic input PIO0_n: PIO0_11 …\nBit 6 - Edge select for start logic input PIO0_n: PIO0_11 …\nBit 6 - Edge select for start logic input PIO0_n: PIO0_11 …\nBit 7 - Edge select for start logic input PIO0_n: PIO0_11 …\nBit 7 - Edge select for start logic input PIO0_n: PIO0_11 …\nBit 8 - Edge select for start logic input PIO0_n: PIO0_11 …\nBit 8 - Edge select for start logic input PIO0_n: PIO0_11 …\nBit 9 - Edge select for start logic input PIO0_n: PIO0_11 …\nBit 9 - Edge select for start logic input PIO0_n: PIO0_11 …\nBit 12 - Edge select for start logic input PIO1_0 0 = …\nBit 12 - Edge select for start logic input PIO1_0 0 = …\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nReader of field <code>ERPIO0_0</code>\nWrite proxy for field <code>ERPIO0_0</code>\nReader of field <code>ERPIO0_10</code>\nWrite proxy for field <code>ERPIO0_10</code>\nReader of field <code>ERPIO0_11</code>\nWrite proxy for field <code>ERPIO0_11</code>\nReader of field <code>ERPIO0_1</code>\nWrite proxy for field <code>ERPIO0_1</code>\nReader of field <code>ERPIO0_2</code>\nWrite proxy for field <code>ERPIO0_2</code>\nReader of field <code>ERPIO0_3</code>\nWrite proxy for field <code>ERPIO0_3</code>\nReader of field <code>ERPIO0_4</code>\nWrite proxy for field <code>ERPIO0_4</code>\nReader of field <code>ERPIO0_5</code>\nWrite proxy for field <code>ERPIO0_5</code>\nReader of field <code>ERPIO0_6</code>\nWrite proxy for field <code>ERPIO0_6</code>\nReader of field <code>ERPIO0_7</code>\nWrite proxy for field <code>ERPIO0_7</code>\nReader of field <code>ERPIO0_8</code>\nWrite proxy for field <code>ERPIO0_8</code>\nReader of field <code>ERPIO0_9</code>\nWrite proxy for field <code>ERPIO0_9</code>\nReader of field <code>ERPIO1_0</code>\nWrite proxy for field <code>ERPIO1_0</code>\nReader of register STARTERP0\nWriter for register STARTERP0\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nBit 0 - Enable start signal for start logic input PIO0_n: …\nBit 0 - Enable start signal for start logic input PIO0_n: …\nBit 1 - Enable start signal for start logic input PIO0_n: …\nBit 1 - Enable start signal for start logic input PIO0_n: …\nBit 10 - Enable start signal for start logic input PIO0_n: …\nBit 10 - Enable start signal for start logic input PIO0_n: …\nBit 11 - Enable start signal for start logic input PIO0_n: …\nBit 11 - Enable start signal for start logic input PIO0_n: …\nBit 2 - Enable start signal for start logic input PIO0_n: …\nBit 2 - Enable start signal for start logic input PIO0_n: …\nBit 3 - Enable start signal for start logic input PIO0_n: …\nBit 3 - Enable start signal for start logic input PIO0_n: …\nBit 4 - Enable start signal for start logic input PIO0_n: …\nBit 4 - Enable start signal for start logic input PIO0_n: …\nBit 5 - Enable start signal for start logic input PIO0_n: …\nBit 5 - Enable start signal for start logic input PIO0_n: …\nBit 6 - Enable start signal for start logic input PIO0_n: …\nBit 6 - Enable start signal for start logic input PIO0_n: …\nBit 7 - Enable start signal for start logic input PIO0_n: …\nBit 7 - Enable start signal for start logic input PIO0_n: …\nBit 8 - Enable start signal for start logic input PIO0_n: …\nBit 8 - Enable start signal for start logic input PIO0_n: …\nBit 9 - Enable start signal for start logic input PIO0_n: …\nBit 9 - Enable start signal for start logic input PIO0_n: …\nBit 12 - Enable start signal for start logic input PIO1_0 …\nBit 12 - Enable start signal for start logic input PIO1_0 …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nWrite proxy for field <code>RSRPIO0_0</code>\nWrite proxy for field <code>RSRPIO0_10</code>\nWrite proxy for field <code>RSRPIO0_11</code>\nWrite proxy for field <code>RSRPIO0_1</code>\nWrite proxy for field <code>RSRPIO0_2</code>\nWrite proxy for field <code>RSRPIO0_3</code>\nWrite proxy for field <code>RSRPIO0_4</code>\nWrite proxy for field <code>RSRPIO0_5</code>\nWrite proxy for field <code>RSRPIO0_6</code>\nWrite proxy for field <code>RSRPIO0_7</code>\nWrite proxy for field <code>RSRPIO0_8</code>\nWrite proxy for field <code>RSRPIO0_9</code>\nWrite proxy for field <code>RSRPIO1_0</code>\nWriter for register STARTRSRP0CLR\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0 - Start signal reset for start logic input …\nBit 1 - Start signal reset for start logic input …\nBit 10 - Start signal reset for start logic input …\nBit 11 - Start signal reset for start logic input …\nBit 2 - Start signal reset for start logic input …\nBit 3 - Start signal reset for start logic input …\nBit 4 - Start signal reset for start logic input …\nBit 5 - Start signal reset for start logic input …\nBit 6 - Start signal reset for start logic input …\nBit 7 - Start signal reset for start logic input …\nBit 8 - Start signal reset for start logic input …\nBit 9 - Start signal reset for start logic input …\nBit 12 - Start signal reset for start logic input PIO1_0 0 …\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nReader of register STARTSRP0\nReader of field <code>SRPIO0_0</code>\nReader of field <code>SRPIO0_10</code>\nReader of field <code>SRPIO0_11</code>\nReader of field <code>SRPIO0_1</code>\nReader of field <code>SRPIO0_2</code>\nReader of field <code>SRPIO0_3</code>\nReader of field <code>SRPIO0_4</code>\nReader of field <code>SRPIO0_5</code>\nReader of field <code>SRPIO0_6</code>\nReader of field <code>SRPIO0_7</code>\nReader of field <code>SRPIO0_8</code>\nReader of field <code>SRPIO0_9</code>\nReader of field <code>SRPIO1_0</code>\nBit 0 - Start signal status for start logic input PIO0_n: …\nBit 1 - Start signal status for start logic input PIO0_n: …\nBit 10 - Start signal status for start logic input PIO0_n: …\nBit 11 - Start signal status for start logic input PIO0_n: …\nBit 2 - Start signal status for start logic input PIO0_n: …\nBit 3 - Start signal status for start logic input PIO0_n: …\nBit 4 - Start signal status for start logic input PIO0_n: …\nBit 5 - Start signal status for start logic input PIO0_n: …\nBit 6 - Start signal status for start logic input PIO0_n: …\nBit 7 - Start signal status for start logic input PIO0_n: …\nBit 8 - Start signal status for start logic input PIO0_n: …\nBit 9 - Start signal status for start logic input PIO0_n: …\nBit 12 - Start signal status for start logic input PIO1_0 …\nClock control for ADC.\nReader of field <code>ADC</code>\nWrite proxy for field <code>ADC</code>\nClock control for C_CAN.\nReader of field <code>CAN</code>\nWrite proxy for field <code>CAN</code>\nClock control for CT16B0.\nReader of field <code>CT16B0</code>\nWrite proxy for field <code>CT16B0</code>\nClock control for CT16B1.\nReader of field <code>CT16B1</code>\nWrite proxy for field <code>CT16B1</code>\nClock control for CT32B0.\nReader of field <code>CT32B0</code>\nWrite proxy for field <code>CT32B0</code>\nClock control for CT32B1.\nReader of field <code>CT32B1</code>\nWrite proxy for field <code>CT32B1</code>\n0: Disable\n0: Disable\n0: Disable\n0: Disable\n0: Disable\n0: Disable\n0: Disable\n0: Disable\n0: Disable\n0: Disable\n0: Disable\n0: Disable\n0: Disable\n0: Disable\n0: Disable\n0: Disabled\n0: Disabled\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enabled\n1: Enabled\nClock control for flash array access.\nReader of field <code>FLASHARRAY</code>\nWrite proxy for field <code>FLASHARRAY</code>\nClock control for the flash register interface.\nReader of field <code>FLASHREG</code>\nWrite proxy for field <code>FLASHREG</code>\nClock control for GPIO.\nReader of field <code>GPIO</code>\nWrite proxy for field <code>GPIO</code>\nClock control for I2C.\nReader of field <code>I2C</code>\nWrite proxy for field <code>I2C</code>\nClock control for the I/O configuration block.\nReader of field <code>IOCON</code>\nWrite proxy for field <code>IOCON</code>\nReader of register SYSAHBCLKCTRL\nClock control for RAM.\nReader of field <code>RAM</code>\nWrite proxy for field <code>RAM</code>\nClock control for ROM.\nReader of field <code>ROM</code>\nWrite proxy for field <code>ROM</code>\nClock control for SPI0.\nReader of field <code>SSP0</code>\nWrite proxy for field <code>SSP0</code>\nClock control for SPI1.\nReader of field <code>SSP1</code>\nWrite proxy for field <code>SSP1</code>\nClock control for AHB to APB bridge, to the AHB matrix, to …\nReader of field <code>SYS</code>\nWrite proxy for field <code>SYS</code>\nClock control for UART.\nReader of field <code>UART</code>\nWrite proxy for field <code>UART</code>\nWriter for register SYSAHBCLKCTRL\nClock control for WDT.\nReader of field <code>WDT</code>\nWrite proxy for field <code>WDT</code>\nBit 13 - Clock control for ADC.\nBit 13 - Clock control for ADC.\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nBit 17 - Clock control for C_CAN.\nBit 17 - Clock control for C_CAN.\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nBit 7 - Clock control for CT16B0.\nBit 7 - Clock control for CT16B0.\nBit 8 - Clock control for CT16B1.\nBit 8 - Clock control for CT16B1.\nBit 9 - Clock control for CT32B0.\nBit 9 - Clock control for CT32B0.\nBit 10 - Clock control for CT32B1.\nBit 10 - Clock control for CT32B1.\nDisable\nDisable\nDisable\nDisable\nDisable\nDisable\nDisable\nDisable\nDisable\nDisable\nDisable\nDisable\nDisable\nDisable\nDisable\nDisabled\nDisabled\nEnable\nEnable\nEnable\nEnable\nEnable\nEnable\nEnable\nEnable\nEnable\nEnable\nEnable\nEnable\nEnable\nEnable\nEnable\nEnable\nEnabled\nEnabled\nBit 4 - Clock control for flash array access.\nBit 4 - Clock control for flash array access.\nBit 3 - Clock control for the flash register interface.\nBit 3 - Clock control for the flash register interface.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBit 6 - Clock control for GPIO.\nBit 6 - Clock control for GPIO.\nBit 5 - Clock control for I2C.\nBit 5 - Clock control for I2C.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 16 - Clock control for the I/O configuration block.\nBit 16 - Clock control for the I/O configuration block.\nChecks if the value of the field is <code>DISABLE</code>\nChecks if the value of the field is <code>DISABLE</code>\nChecks if the value of the field is <code>DISABLE</code>\nChecks if the value of the field is <code>DISABLE</code>\nChecks if the value of the field is <code>DISABLE</code>\nChecks if the value of the field is <code>DISABLE</code>\nChecks if the value of the field is <code>DISABLE</code>\nChecks if the value of the field is <code>DISABLE</code>\nChecks if the value of the field is <code>DISABLE</code>\nChecks if the value of the field is <code>DISABLE</code>\nChecks if the value of the field is <code>DISABLE</code>\nChecks if the value of the field is <code>DISABLE</code>\nChecks if the value of the field is <code>DISABLE</code>\nChecks if the value of the field is <code>DISABLE</code>\nChecks if the value of the field is <code>DISABLE</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLE</code>\nChecks if the value of the field is <code>ENABLE</code>\nChecks if the value of the field is <code>ENABLE</code>\nChecks if the value of the field is <code>ENABLE</code>\nChecks if the value of the field is <code>ENABLE</code>\nChecks if the value of the field is <code>ENABLE</code>\nChecks if the value of the field is <code>ENABLE</code>\nChecks if the value of the field is <code>ENABLE</code>\nChecks if the value of the field is <code>ENABLE</code>\nChecks if the value of the field is <code>ENABLE</code>\nChecks if the value of the field is <code>ENABLE</code>\nChecks if the value of the field is <code>ENABLE</code>\nChecks if the value of the field is <code>ENABLE</code>\nChecks if the value of the field is <code>ENABLE</code>\nChecks if the value of the field is <code>ENABLE</code>\nChecks if the value of the field is <code>ENABLE</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nBit 2 - Clock control for RAM.\nBit 2 - Clock control for RAM.\nBit 1 - Clock control for ROM.\nBit 1 - Clock control for ROM.\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nBit 11 - Clock control for SPI0.\nBit 11 - Clock control for SPI0.\nBit 18 - Clock control for SPI1.\nBit 18 - Clock control for SPI1.\nBit 0 - Clock control for AHB to APB bridge, to the AHB …\nBit 0 - Clock control for AHB to APB bridge, to the AHB …\nBit 12 - Clock control for UART.\nBit 12 - Clock control for UART.\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nBit 15 - Clock control for WDT.\nBit 15 - Clock control for WDT.\nReader of field <code>DIV</code>\nWrite proxy for field <code>DIV</code>\nReader of register SYSAHBCLKDIV\nWriter for register SYSAHBCLKDIV\nWrites raw bits to the field\nBits 0:7 - System AHB clock divider values 0: System clock …\nBits 0:7 - System AHB clock divider values 0: System clock …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n0: Boot Loader Mode. Interrupt vectors are re-mapped to …\nSystem memory remap.\nReader of field <code>MAP</code>\nWrite proxy for field <code>MAP</code>\nReader of register SYSMEMREMAP\n2: User Flash Mode. Interrupt vectors are not re-mapped …\n1: User RAM Mode. Interrupt vectors are re-mapped to …\nWriter for register SYSMEMREMAP\nWrites raw bits to the field\nBoot Loader Mode. Interrupt vectors are re-mapped to Boot …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>BOOT_LOADER_MODE_IN</code>\nChecks if the value of the field is <code>USER_FLASH_MODE_INT</code>\nChecks if the value of the field is <code>USER_RAM_MODE_INTER</code>\nBits 0:1 - System memory remap.\nBits 0:1 - System memory remap.\nUser Flash Mode. Interrupt vectors are not re-mapped and …\nUser RAM Mode. Interrupt vectors are re-mapped to Static …\nGet enumerated values variant\nWrites <code>variant</code> to the field\nBypass system oscillator.\n1: Bypass enabled. PLL input (sys_osc_clk) is fed directly …\nReader of field <code>BYPASS</code>\nWrite proxy for field <code>BYPASS</code>\nDetermines frequency range for Low-power oscillator.\nReader of field <code>FREQRANGE</code>\nWrite proxy for field <code>FREQRANGE</code>\n1: 15 - 25 MHz frequency range\n0: 1 - 20 MHz frequency range\n0: Oscillator is not bypassed\nReader of register SYSOSCCTRL\nWriter for register SYSOSCCTRL\nWrites raw bits to the field\nWrites raw bits to the field\nBit 0 - Bypass system oscillator.\nBit 0 - Bypass system oscillator.\nBypass enabled. PLL input (sys_osc_clk) is fed directly …\nClears the field bit\nClears the field bit\nBit 1 - Determines frequency range for Low-power …\nBit 1 - Determines frequency range for Low-power …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n15 - 25 MHz frequency range\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>BYPASS_ENABLED_PLL_</code>\nChecks if the value of the field is <code>HIGH</code>\nChecks if the value of the field is <code>LOW</code>\nChecks if the value of the field is <code>NOBYPASS</code>\n1 - 20 MHz frequency range\nOscillator is not bypassed\nSets the field bit\nSets the field bit\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\n0: IRC oscillator\nReader of register SYSPLLCLKSEL\nSystem PLL clock source.\nReader of field <code>SEL</code>\nWrite proxy for field <code>SEL</code>\n1: System oscillator\nWriter for register SYSPLLCLKSEL\nWrites raw bits to the field\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIRC oscillator\nChecks if the value of the field is <code>IRC_OSCILLATOR</code>\nChecks if the value of the field is <code>SYSTEM_OSCILLATOR</code>\nBits 0:1 - System PLL clock source.\nBits 0:1 - System PLL clock source.\nSystem oscillator\nGet enumerated values variant\nWrites <code>variant</code> to the field\nEnable system PLL clock source update.\nReader of field <code>ENA</code>\nWrite proxy for field <code>ENA</code>\n0: No change\nReader of register SYSPLLCLKUEN\n1: Update clock source\nWriter for register SYSPLLCLKUEN\nWrites raw bits to the field\nClears the field bit\nBit 0 - Enable system PLL clock source update.\nBit 0 - Enable system PLL clock source update.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>NO_CHANGE</code>\nChecks if the value of the field is <code>UPDATE_CLOCK_SOURCE</code>\nNo change\nSets the field bit\nUpdate clock source\nGet enumerated values variant\nWrites <code>variant</code> to the field\nReader of field <code>MSEL</code>\nWrite proxy for field <code>MSEL</code>\nPost divider ratio P. The division ratio is 2 x P.\nReader of field <code>PSEL</code>\nWrite proxy for field <code>PSEL</code>\n0: P = 1\n1: P = 2\n2: P = 4\n3: P = 8\nReader of register SYSPLLCTRL\nWriter for register SYSPLLCTRL\nWrites raw bits to the field\nWrites raw bits to the field\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>P_EQ_1</code>\nChecks if the value of the field is <code>P_EQ_2</code>\nChecks if the value of the field is <code>P_EQ_4</code>\nChecks if the value of the field is <code>P_EQ_8</code>\nBits 0:4 - Feedback divider value. The division value M is …\nBits 0:4 - Feedback divider value. The division value M is …\nP = 1\nP = 2\nP = 4\nP = 8\nBits 5:6 - Post divider ratio P. The division ratio is 2 x …\nBits 5:6 - Post divider ratio P. The division ratio is 2 x …\nGet enumerated values variant\nWrites <code>variant</code> to the field\nPLL lock status.\nReader of field <code>LOCK</code>\n1: PLL locked\n0: PLL not locked\nReader of register SYSPLLSTAT\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>PLL_LOCKED</code>\nChecks if the value of the field is <code>PLL_NOT_LOCKED</code>\nBit 0 - PLL lock status.\nGet enumerated values variant\nStatus of the Brown-out detect reset.\nReader of field <code>BOD</code>\n1: BOD reset detected. Writing a one clears this reset\nStatus of the external RESET pin.\nReader of field <code>EXTRST</code>\n0: No BOD reset detected\n0: No POR detected\n0: No RESET event detected\n0: No System reset detected\n0: No WDT reset detected\nPOR reset status.\n1: POR detected. Writing a one clears this reset\nReader of field <code>POR</code>\nReader of register SYSRSTSTAT\n1: RESET detected. Writing a one clears this reset\nStatus of the software system reset.\nReader of field <code>SYSRST</code>\n1: System reset detected. Writing a one clears this reset\nStatus of the Watchdog reset.\nReader of field <code>WDT</code>\n1: WDT reset detected. Writing a one clears this reset\nBit 3 - Status of the Brown-out detect reset.\nBit 1 - Status of the external RESET pin.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>BOD_RESET_DETECTED_</code>\nChecks if the value of the field is <code>NO_BOD_RESET_DETECTE</code>\nChecks if the value of the field is <code>NO_POR_DETECTED_</code>\nChecks if the value of the field is <code>NO_RESET_EVENT_DETEC</code>\nChecks if the value of the field is <code>NO_SYSTEM_RESET_DETE</code>\nChecks if the value of the field is <code>NO_WDT_RESET_DETECTE</code>\nChecks if the value of the field is <code>POR_DETECTED_WRITIN</code>\nChecks if the value of the field is <code>RESET_DETECTED_WRIT</code>\nChecks if the value of the field is <code>SYSTEM_RESET_DETECTE</code>\nChecks if the value of the field is <code>WDT_RESET_DETECTED_</code>\nBit 0 - POR reset status.\nBit 4 - Status of the software system reset.\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nBit 2 - Status of the Watchdog reset.\nReader of field <code>CAL</code>\nWrite proxy for field <code>CAL</code>\nReader of register SYSTCKCAL\nWriter for register SYSTCKCAL\nWrites raw bits to the field\nBits 0:25 - System tick timer calibration value.\nBits 0:25 - System tick timer calibration value.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReader of field <code>DIV</code>\nWrite proxy for field <code>DIV</code>\nReader of register UARTCLKDIV\nWriter for register UARTCLKDIV\nWrites raw bits to the field\nBits 0:7 - UART_PCLK clock divider values 0: Disable …\nBits 0:7 - UART_PCLK clock divider values 0: Disable …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReader of field <code>DIV</code>\nWrite proxy for field <code>DIV</code>\nReader of register WDTCLKDIV\nWriter for register WDTCLKDIV\nWrites raw bits to the field\nBits 0:7 - WDT clock divider values 0: Disable WDCLK. 1: …\nBits 0:7 - WDT clock divider values 0: Disable WDCLK. 1: …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n0: IRC oscillator\n1: Main clock\nReader of register WDTCLKSEL\nWDT clock source.\nReader of field <code>SEL</code>\nWrite proxy for field <code>SEL</code>\nWriter for register WDTCLKSEL\n2: Watchdog oscillator\nWrites raw bits to the field\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIRC oscillator\nChecks if the value of the field is <code>IRC_OSCILLATOR</code>\nChecks if the value of the field is <code>MAIN_CLOCK</code>\nChecks if the value of the field is <code>WATCHDOG_OSCILLATOR</code>\nMain clock\nBits 0:1 - WDT clock source.\nBits 0:1 - WDT clock source.\nGet enumerated values variant\nWrites <code>variant</code> to the field\nWatchdog oscillator\nEnable WDT clock source update.\nReader of field <code>ENA</code>\nWrite proxy for field <code>ENA</code>\n0: No change\nReader of register WDTCLKUEN\n1: Update clock source\nWriter for register WDTCLKUEN\nWrites raw bits to the field\nClears the field bit\nBit 0 - Enable WDT clock source update.\nBit 0 - Enable WDT clock source update.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>NO_CHANGE</code>\nChecks if the value of the field is <code>UPDATE_CLOCK_SOURCE</code>\nNo change\nSets the field bit\nUpdate clock source\nGet enumerated values variant\nWrites <code>variant</code> to the field\nReader of field <code>DIVSEL</code>\nWrite proxy for field <code>DIVSEL</code>\nSelect watchdog oscillator analog output frequency …\nReader of field <code>FREQSEL</code>\nWrite proxy for field <code>FREQSEL</code>\nReader of register WDTOSCCTRL\nWriter for register WDTOSCCTRL\n1: 0.5 MHz\n0.5 MHz\n2: 0.8 MHz\n0.8 MHz\n3: 1.1 MHz\n1.1 MHz\n4: 1.4 MHz\n1.4 MHz\n5: 1.6 MHz\n1.6 MHz\n6: 1.8 MHz\n1.8 MHz\n7: 2.0 MHz\n2.0 MHz\n8: 2.2 MHz\n2.2 MHz\n9: 2.4 MHz\n2.4 MHz\n10: 2.6 MHz\n2.6 MHz\n11: 2.7 MHz\n2.7 MHz\n12: 2.9 MHz\n2.9 MHz\n13: 3.1 MHz\n3.1 MHz\n14: 3.2 MHz\n3.2 MHz\n15: 3.4 MHz\n3.4 MHz\nWrites raw bits to the field\nWrites raw bits to the field\nBits 0:4 - Select divider for Fclkana. wdt_osc_clk = …\nBits 0:4 - Select divider for Fclkana. wdt_osc_clk = …\nBits 5:8 - Select watchdog oscillator analog output …\nBits 5:8 - Select watchdog oscillator analog output …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>_0_5_MHZ</code>\nChecks if the value of the field is <code>_0_8_MHZ</code>\nChecks if the value of the field is <code>_1_1_MHZ</code>\nChecks if the value of the field is <code>_1_4_MHZ</code>\nChecks if the value of the field is <code>_1_6_MHZ</code>\nChecks if the value of the field is <code>_1_8_MHZ</code>\nChecks if the value of the field is <code>_2_0_MHZ</code>\nChecks if the value of the field is <code>_2_2_MHZ</code>\nChecks if the value of the field is <code>_2_4_MHZ</code>\nChecks if the value of the field is <code>_2_6_MHZ</code>\nChecks if the value of the field is <code>_2_7_MHZ</code>\nChecks if the value of the field is <code>_2_9_MHZ</code>\nChecks if the value of the field is <code>_3_1_MHZ</code>\nChecks if the value of the field is <code>_3_2_MHZ</code>\nChecks if the value of the field is <code>_3_4_MHZ</code>\nGet enumerated values variant\nWrites <code>variant</code> to the field\nAuto-baud Control Register. Contains controls for the …\nDivisor Latch LSB. Least significant byte of the baud rate …\nDivisor Latch MSB. Most significant byte of the baud rate …\nFIFO Control Register. Controls UART FIFO usage and modes\nFractional Divider Register. Generates a clock input for …\nInterrupt Enable Register. Contains individual interrupt …\nInterrupt ID Register. Identifies which interrupt(s) are …\nLine Control Register. Contains controls for frame …\nLine Status Register. Contains flags for transmit and …\nModem control register\nModem status register\nReceiver Buffer Register. Contains the next received …\nRS-485/EIA-485 address match. Contains the address match …\nRS-485/EIA-485 Control. Contains controls to configure …\nRS-485/EIA-485 direction control delay\nRegister block\nScratch Pad Register. Eight-bit temporary storage for …\nTransmit Enable Register. Turns off UART transmitter for …\nTransmit Holding Register. The next character to be …\nAuto-baud Control Register. Contains controls for the …\n0x20 - Auto-baud Control Register. Contains controls for …\nDivisor Latch LSB. Least significant byte of the baud rate …\n0x00 - Divisor Latch LSB. Least significant byte of the …\n0x00 - Divisor Latch LSB. Least significant byte of the …\nDivisor Latch MSB. Most significant byte of the baud rate …\n0x04 - Divisor Latch MSB. Most significant byte of the …\n0x04 - Divisor Latch MSB. Most significant byte of the …\nFIFO Control Register. Controls UART FIFO usage and modes\n0x08 - FIFO Control Register. Controls UART FIFO usage and …\n0x08 - FIFO Control Register. Controls UART FIFO usage and …\nFractional Divider Register. Generates a clock input for …\n0x28 - Fractional Divider Register. Generates a clock …\nReturns the argument unchanged.\nInterrupt Enable Register. Contains individual interrupt …\n0x04 - Interrupt Enable Register. Contains individual …\n0x04 - Interrupt Enable Register. Contains individual …\nInterrupt ID Register. Identifies which interrupt(s) are …\n0x08 - Interrupt ID Register. Identifies which …\n0x08 - Interrupt ID Register. Identifies which …\nCalls <code>U::from(self)</code>.\nLine Control Register. Contains controls for frame …\n0x0c - Line Control Register. Contains controls for frame …\nLine Status Register. Contains flags for transmit and …\n0x14 - Line Status Register. Contains flags for transmit …\nModem control register\n0x10 - Modem control register\nModem status register\n0x18 - Modem status register\nReceiver Buffer Register. Contains the next received …\n0x00 - Receiver Buffer Register. Contains the next …\n0x00 - Receiver Buffer Register. Contains the next …\nRS-485/EIA-485 address match. Contains the address match …\n0x50 - RS-485/EIA-485 address match. Contains the address …\nRS-485/EIA-485 Control. Contains controls to configure …\n0x4c - RS-485/EIA-485 Control. Contains controls to …\nRS-485/EIA-485 direction control delay\n0x54 - RS-485/EIA-485 direction control delay\nScratch Pad Register. Eight-bit temporary storage for …\n0x1c - Scratch Pad Register. Eight-bit temporary storage …\nTransmit Enable Register. Turns off UART transmitter for …\n0x30 - Transmit Enable Register. Turns off UART …\nTransmit Holding Register. The next character to be …\n0x00 - Transmit Holding Register. The next character to be …\n0x00 - Transmit Holding Register. The next character to be …\nEnd of auto-baud interrupt clear (write only accessible).\nReader of field <code>ABEOINTCLR</code>\nWrite proxy for field <code>ABEOINTCLR</code>\nAuto-baud time-out interrupt clear (write only accessible).\nReader of field <code>ABTOINTCLR</code>\nWrite proxy for field <code>ABTOINTCLR</code>\nRestart enable.\nReader of field <code>AUTORESTART</code>\nWrite proxy for field <code>AUTORESTART</code>\n1: Writing a 1 will clear the corresponding interrupt in …\n1: Writing a 1 will clear the corresponding interrupt in …\n0: Mode 0\n1: Mode 1\nAuto-baud mode select.\nReader of field <code>MODE</code>\nWrite proxy for field <code>MODE</code>\n0: Writing a 0 has no impact\n0: Writing a 0 has no impact\n0: No restart\nReader of register ACR\n1: Restart in case of time-out (counter restarts at next …\n1: Auto-baud start (auto-baud is running). Auto-baud run …\nStart bit. This bit is automatically cleared after …\nReader of field <code>START</code>\nWrite proxy for field <code>START</code>\n0: Auto-baud stop (auto-baud is not running)\nWriter for register ACR\nBit 8 - End of auto-baud interrupt clear (write only …\nBit 8 - End of auto-baud interrupt clear (write only …\nBit 9 - Auto-baud time-out interrupt clear (write only …\nBit 9 - Auto-baud time-out interrupt clear (write only …\nBit 2 - Restart enable.\nBit 2 - Restart enable.\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWriting a 1 will clear the corresponding interrupt in the …\nWriting a 1 will clear the corresponding interrupt in the …\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>CLEAR</code>\nChecks if the value of the field is <code>CLEAR</code>\nChecks if the value of the field is <code>MODE_0_</code>\nChecks if the value of the field is <code>MODE_1_</code>\nChecks if the value of the field is <code>NO_RESTART</code>\nChecks if the value of the field is <code>NOIMPACT</code>\nChecks if the value of the field is <code>NOIMPACT</code>\nChecks if the value of the field is <code>RESTART_IN_CASE_OF_T</code>\nChecks if the value of the field is <code>START</code>\nChecks if the value of the field is <code>STOP</code>\nBit 1 - Auto-baud mode select.\nBit 1 - Auto-baud mode select.\nMode 0\nMode 1\nNo restart\nWriting a 0 has no impact\nWriting a 0 has no impact\nRestart in case of time-out (counter restarts at next UART …\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nBit 0 - Start bit. This bit is automatically cleared after …\nBit 0 - Start bit. This bit is automatically cleared after …\nAuto-baud start (auto-baud is running). Auto-baud run bit. …\nAuto-baud stop (auto-baud is not running)\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nReader of field <code>DLLSB</code>\nWrite proxy for field <code>DLLSB</code>\nReader of register DLL\nWriter for register DLL\nWrites raw bits to the field\nBits 0:7 - The UART Divisor Latch LSB Register, along with …\nBits 0:7 - The UART Divisor Latch LSB Register, along with …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReader of field <code>DLMSB</code>\nWrite proxy for field <code>DLMSB</code>\nReader of register DLM\nWriter for register DLM\nWrites raw bits to the field\nBits 0:7 - The UART Divisor Latch MSB Register, along with …\nBits 0:7 - The UART Divisor Latch MSB Register, along with …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n1: Writing a logic 1 to FCR[1] will clear all bytes in …\n1: Writing a logic 1 to FCR[2] will clear all bytes in …\n0: UART FIFOs are disabled. Must not be used in the …\n2: Trigger level 2 (8 characters)\n1: Active high enable for both UART Rx and TX FIFOs and FCR…\nFIFO Enable.\nWrite proxy for field <code>FIFOEN</code>\n3: Trigger level 3 (14 characters)\n1: Trigger level 1 (4 characters)\n0: Trigger level 0 (1 character)\nRX FIFO Reset.\nWrite proxy for field <code>RXFIFORES</code>\nRX Trigger Level. These two bits determine how many …\nWrite proxy for field <code>RXTL</code>\nTX FIFO Reset.\nWrite proxy for field <code>TXFIFORES</code>\nWriter for register FCR\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWriting a logic 1 to FCR[1] will clear all bytes in UART …\nWriting a logic 1 to FCR[2] will clear all bytes in UART …\nClears the field bit\nClears the field bit\nClears the field bit\nUART FIFOs are disabled. Must not be used in the …\nTrigger level 2 (8 characters)\nActive high enable for both UART Rx and TX FIFOs and FCR…\nBit 0 - FIFO Enable.\nTrigger level 1 (4 characters)\nTrigger level 3 (14 characters)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrigger level 0 (1 character)\nBit 1 - RX FIFO Reset.\nBits 6:7 - RX Trigger Level. These two bits determine how …\nSets the field bit\nSets the field bit\nSets the field bit\nBit 2 - TX FIFO Reset.\nWrites <code>variant</code> to the field\nWrites <code>variant</code> to the field\nWrites <code>variant</code> to the field\nWrites <code>variant</code> to the field\nReader of field <code>DIVADDVAL</code>\nWrite proxy for field <code>DIVADDVAL</code>\nReader of field <code>MULVAL</code>\nWrite proxy for field <code>MULVAL</code>\nReader of register FDR\nWriter for register FDR\nWrites raw bits to the field\nWrites raw bits to the field\nBits 0:3 - Baud rate generation pre-scaler divisor value. …\nBits 0:3 - Baud rate generation pre-scaler divisor value. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 4:7 - Baud rate pre-scaler multiplier value. This …\nBits 4:7 - Baud rate pre-scaler multiplier value. This …\nEnables the end of auto-baud interrupt.\nReader of field <code>ABEOINTEN</code>\nWrite proxy for field <code>ABEOINTEN</code>\nEnables the auto-baud time-out interrupt.\nReader of field <code>ABTOINTEN</code>\nWrite proxy for field <code>ABTOINTEN</code>\n0: Disable the RDA interrupt\n0: Disable the THRE interrupt\n0: Disable the RX line status interrupts\n0: Disable auto-baud time-out Interrupt\n0: Disable end of auto-baud Interrupt\n1: Enable the RDA interrupt\n1: Enable the THRE interrupt\n1: Enable the RX line status interrupts\n1: Enable auto-baud time-out Interrupt\n1: Enable end of auto-baud Interrupt\nReader of register IER\nRBR Interrupt Enable. Enables the Receive Data Available …\nReader of field <code>RBRIE</code>\nWrite proxy for field <code>RBRIE</code>\nRX Line Interrupt Enable. Enables the UART RX line status …\nReader of field <code>RXLIE</code>\nWrite proxy for field <code>RXLIE</code>\nTHRE Interrupt Enable. Enables the THRE interrupt for …\nReader of field <code>THREIE</code>\nWrite proxy for field <code>THREIE</code>\nWriter for register IER\nBit 8 - Enables the end of auto-baud interrupt.\nBit 8 - Enables the end of auto-baud interrupt.\nBit 9 - Enables the auto-baud time-out interrupt.\nBit 9 - Enables the auto-baud time-out interrupt.\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nDisable the RDA interrupt\nDisable the THRE interrupt\nDisable the RX line status interrupts\nDisable auto-baud time-out Interrupt\nDisable end of auto-baud Interrupt\nEnable the RDA interrupt\nEnable the THRE interrupt\nEnable the RX line status interrupts\nEnable auto-baud time-out Interrupt\nEnable end of auto-baud Interrupt\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLE</code>\nChecks if the value of the field is <code>DISABLE</code>\nChecks if the value of the field is <code>DISABLE</code>\nChecks if the value of the field is <code>DISABLE_AUTO_BAUD_TI</code>\nChecks if the value of the field is <code>DISABLE_END_OF_AUTO_</code>\nChecks if the value of the field is <code>ENABLE</code>\nChecks if the value of the field is <code>ENABLE</code>\nChecks if the value of the field is <code>ENABLE</code>\nChecks if the value of the field is <code>ENABLE_AUTO_BAUD_TIM</code>\nChecks if the value of the field is <code>ENABLE_END_OF_AUTO_B</code>\nBit 0 - RBR Interrupt Enable. Enables the Receive Data …\nBit 0 - RBR Interrupt Enable. Enables the Receive Data …\nBit 2 - RX Line Interrupt Enable. Enables the UART RX line …\nBit 2 - RX Line Interrupt Enable. Enables the UART RX line …\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nBit 1 - THRE Interrupt Enable. Enables the THRE interrupt …\nBit 1 - THRE Interrupt Enable. Enables the THRE interrupt …\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nReader of field <code>ABEOINT</code>\nReader of field <code>ABTOINT</code>\n6: 2b - Character Time-out Indicator (CTI)\nReader of field <code>FIFOENABLE</code>\nInterrupt identification. IER[3:1] identifies an interrupt …\nReader of field <code>INTID</code>\nInterrupt status. Note that IIR[0] is active low. The …\nReader of field <code>INTSTATUS</code>\n0: 4 - Modem interrupt\n1: No interrupt is pending\n0: At least one interrupt is pending\nReader of register IIR\n2: 2a - Receive Data Available (RDA)\n3: 1 - Receive Line Status (RLS)\n1: 3 - THRE Interrupt\nBit 8 - End of auto-baud interrupt. True if auto-baud has …\nBit 9 - Auto-baud time-out interrupt. True if auto-baud …\nBits 6:7 - These bits are equivalent to FCR[0].\nReturns the argument unchanged.\nReturns the argument unchanged.\nBits 1:3 - Interrupt identification. IER[3:1] identifies …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0 - Interrupt status. Note that IIR[0] is active low. …\nChecks if the value of the field is <code>CTI</code>\nChecks if the value of the field is <code>MODEM</code>\nChecks if the value of the field is <code>NO_INTERRUPT_IS_PEND</code>\nChecks if the value of the field is <code>PENDING</code>\nChecks if the value of the field is <code>RDA</code>\nChecks if the value of the field is <code>RLS</code>\nChecks if the value of the field is <code>THRE</code>\nGet enumerated values variant\nGet enumerated values variant\nBreak Control.\nReader of field <code>BC</code>\nWrite proxy for field <code>BC</code>\n0: Disable parity generation and checking\n0: Disable break transmission\n0: Disable access to Divisor Latches\nDivisor Latch Access Bit.\nReader of field <code>DLAB</code>\nWrite proxy for field <code>DLAB</code>\n3: 8-bit character length\n1: Enable parity generation and checking\n1: Enable break transmission. Output pin UART TXD is …\n1: Enable access to Divisor Latches\n1: Even Parity. Number of 1s in the transmitted character …\n0: 5-bit character length\n3: Forced 0 stick parity\n2: Forced 1 stick parity\n0: Odd parity. Number of 1s in the transmitted character …\n0: 1 stop bit\nParity Enable.\nReader of field <code>PE</code>\nWrite proxy for field <code>PE</code>\nParity Select.\nReader of field <code>PS</code>\nWrite proxy for field <code>PS</code>\nReader of register LCR\nStop Bit Select.\nReader of field <code>SBS</code>\nWrite proxy for field <code>SBS</code>\n2: 7-bit character length\n1: 6-bit character length\n1: 2 stop bits, or 1.5 if using 5-bit words\nWriter for register LCR\nWord Length Select.\nReader of field <code>WLS</code>\nWrite proxy for field <code>WLS</code>\nBit 6 - Break Control.\nBit 6 - Break Control.\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nDisable parity generation and checking\nDisable break transmission\nDisable access to Divisor Latches\nBit 7 - Divisor Latch Access Bit.\nBit 7 - Divisor Latch Access Bit.\n8-bit character length\nEnable parity generation and checking\nEnable break transmission. Output pin UART TXD is forced …\nEnable access to Divisor Latches\nEven Parity. Number of 1s in the transmitted character and …\n5-bit character length\nForced 0 stick parity\nForced 1 stick parity\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLE</code>\nChecks if the value of the field is <code>DISABLE</code>\nChecks if the value of the field is <code>DISABLE</code>\nChecks if the value of the field is <code>EIGHT</code>\nChecks if the value of the field is <code>ENABLE</code>\nChecks if the value of the field is <code>ENABLE</code>\nChecks if the value of the field is <code>ENABLE</code>\nChecks if the value of the field is <code>EVEN</code>\nChecks if the value of the field is <code>FIVE</code>\nChecks if the value of the field is <code>FORCED_0_STICK</code>\nChecks if the value of the field is <code>FORCED_1_STICK</code>\nChecks if the value of the field is <code>ODD</code>\nChecks if the value of the field is <code>ONE</code>\nChecks if the value of the field is <code>SEVEN</code>\nChecks if the value of the field is <code>SIX</code>\nChecks if the value of the field is <code>TWO</code>\nOdd parity. Number of 1s in the transmitted character and …\n1 stop bit\nBit 3 - Parity Enable.\nBit 3 - Parity Enable.\nBits 4:5 - Parity Select.\nBits 4:5 - Parity Select.\nBit 2 - Stop Bit Select.\nBit 2 - Stop Bit Select.\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\n7-bit character length\n6-bit character length\n2 stop bits, or 1.5 if using 5-bit words\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nBits 0:1 - Word Length Select.\nBits 0:1 - Word Length Select.\n1: Overrun error status is active\n1: Parity error status is active\n1: Framing error status is active\n1: Break interrupt status is active\nBreak Interrupt. When RXD1 is held in the spacing state …\nReader of field <code>BI</code>\n0: RBR is empty\n1: THR is empty\n1: THR and the TSR are empty\n1: UART RBR contains at least one UART RX error\nFraming Error. When the stop bit of a received character …\nReader of field <code>FE</code>\n0: Overrun error status is inactive\n0: Parity error status is inactive\n0: Framing error status is inactive\n0: Break interrupt status is inactive\n0: RBR contains no UART RX errors or FCR[0]=0\nOverrun Error. The overrun error condition is set as soon …\nReader of field <code>OE</code>\nParity Error. When the parity bit of a received character …\nReader of field <code>PE</code>\nReader of register LSR\nReceiver Data Ready. LSR[0] is set when the RBR holds an …\nReader of field <code>RDR</code>\nError in RX FIFO. LSR[7] is set when a character with a RX …\nReader of field <code>RXFE</code>\nTransmitter Empty. TEMT is set when both THR and TSR are …\nReader of field <code>TEMT</code>\nTransmitter Holding Register Empty. THRE is set …\nReader of field <code>THRE</code>\n1: RBR contains valid data\n0: THR contains valid data\n0: THR and/or the TSR contains valid data\nBit 4 - Break Interrupt. When RXD1 is held in the spacing …\nBit 3 - Framing Error. When the stop bit of a received …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>ACTIVE</code>\nChecks if the value of the field is <code>ACTIVE</code>\nChecks if the value of the field is <code>ACTIVE</code>\nChecks if the value of the field is <code>ACTIVE</code>\nChecks if the value of the field is <code>EMPTY_</code>\nChecks if the value of the field is <code>EMPTY_</code>\nChecks if the value of the field is <code>EMPTY_</code>\nChecks if the value of the field is <code>ERROR</code>\nChecks if the value of the field is <code>INACTIVE</code>\nChecks if the value of the field is <code>INACTIVE</code>\nChecks if the value of the field is <code>INACTIVE</code>\nChecks if the value of the field is <code>INACTIVE</code>\nChecks if the value of the field is <code>NOERROR</code>\nChecks if the value of the field is <code>VALID</code>\nChecks if the value of the field is <code>VALID</code>\nChecks if the value of the field is <code>VALID</code>\nBit 1 - Overrun Error. The overrun error condition is set …\nBit 2 - Parity Error. When the parity bit of a received …\nBit 0 - Receiver Data Ready. LSR[0] is set when the RBR …\nBit 7 - Error in RX FIFO. LSR[7] is set when a character …\nBit 6 - Transmitter Empty. TEMT is set when both THR and …\nBit 5 - Transmitter Holding Register Empty. THRE is set …\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nCTS flow control.\nReader of field <code>CTSEN</code>\nWrite proxy for field <code>CTSEN</code>\n0: Disable auto-cts flow control\n0: Disable auto-rts flow control\nReader of field <code>DTRC</code>\nWrite proxy for field <code>DTRC</code>\n1: Enable auto-cts flow control\n1: Enable auto-rts flow control\nReader of field <code>LMS</code>\nWrite proxy for field <code>LMS</code>\nReader of register MCR\nReader of field <code>RTSC</code>\nWrite proxy for field <code>RTSC</code>\nRTS flow control.\nReader of field <code>RTSEN</code>\nWrite proxy for field <code>RTSEN</code>\nWriter for register MCR\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nBit 7 - CTS flow control.\nBit 7 - CTS flow control.\nDisable auto-cts flow control\nDisable auto-rts flow control\nBit 0 - DTR Control. Source for modem output pin, DTR. …\nBit 0 - DTR Control. Source for modem output pin, DTR. …\nEnable auto-cts flow control\nEnable auto-rts flow control\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLE_AUTO_CTS_FLO</code>\nChecks if the value of the field is <code>DISABLE_AUTO_RTS_FLO</code>\nChecks if the value of the field is <code>ENABLE_AUTO_CTS_FLOW</code>\nChecks if the value of the field is <code>ENABLE_AUTO_RTS_FLOW</code>\nBit 4 - Loopback Mode Select. The modem loopback mode …\nBit 4 - Loopback Mode Select. The modem loopback mode …\nBit 1 - RTS Control. Source for modem output pin RTS. This …\nBit 1 - RTS Control. Source for modem output pin RTS. This …\nBit 6 - RTS flow control.\nBit 6 - RTS flow control.\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nReader of field <code>CTS</code>\nReader of field <code>DCD</code>\nDelta CTS. Set upon state change of input CTS. Cleared on …\nReader of field <code>DCTS</code>\nDelta DCD. Set upon state change of input DCD. Cleared on …\nReader of field <code>DDCD</code>\nDelta DSR. Set upon state change of input DSR. Cleared on …\nReader of field <code>DDSR</code>\nReader of field <code>DSR</code>\n1: Low-to-high transition detected on RI\n0: No change detected on modem input CTS\n0: No change detected on modem input DSR\n0: No change detected on modem input, RI\n0: No change detected on modem input DCD\nReader of register MSR\nReader of field <code>RI</code>\n1: State change detected on modem input CTS\n1: State change detected on modem input DSR\n1: State change detected on modem input DCD\nTrailing Edge RI. Set upon low to high transition of input …\nReader of field <code>TERI</code>\nBit 4 - Clear To Send State. Complement of input signal …\nBit 7 - Data Carrier Detect State. Complement of input …\nBit 0 - Delta CTS. Set upon state change of input CTS. …\nBit 3 - Delta DCD. Set upon state change of input DCD. …\nBit 1 - Delta DSR. Set upon state change of input DSR. …\nBit 5 - Data Set Ready State. Complement of input signal …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>LOW_TO_HIGH_TRANSITI</code>\nChecks if the value of the field is <code>NO_CHANGE_DETECTED_O</code>\nChecks if the value of the field is <code>NO_CHANGE_DETECTED_O</code>\nChecks if the value of the field is <code>NO_CHANGE_DETECTED_O</code>\nChecks if the value of the field is <code>NO_CHANGE_DETECTED_O</code>\nChecks if the value of the field is <code>STATE_CHANGE_DETECTE</code>\nChecks if the value of the field is <code>STATE_CHANGE_DETECTE</code>\nChecks if the value of the field is <code>STATE_CHANGE_DETECTE</code>\nBit 6 - Ring Indicator State. Complement of input RI. This …\nBit 2 - Trailing Edge RI. Set upon low to high transition …\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nReader of register RBR\nReader of field <code>RBR</code>\nBits 0:7 - The UART Receiver Buffer Register contains the …\nReader of field <code>ADRMATCH</code>\nWrite proxy for field <code>ADRMATCH</code>\nReader of register RS485ADRMATCH\nWriter for register RS485ADRMATCH\nBits 0:7 - Contains the address match value.\nBits 0:7 - Contains the address match value.\nWrites raw bits to the field\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAAD enable.\nReader of field <code>AADEN</code>\nWrite proxy for field <code>AADEN</code>\nAuto direction control enable.\nReader of field <code>DCTRL</code>\nWrite proxy for field <code>DCTRL</code>\n0: RS-485/EIA-485 Normal Multidrop Mode (NMM) is disabled\n1: The receiver is disabled\n0: Auto Address Detect (AAD) is disabled\n0: Disable Auto Direction Control\n1: If direction control is enabled (bit DCTRL = 1), pin …\n1: RS-485/EIA-485 Normal Multidrop Mode (NMM) is enabled. …\n0: The receiver is enabled\n1: Auto Address Detect (AAD) is enabled\n1: Enable Auto Direction Control\n1: The direction control pin will be driven to logic 1 …\n0: The direction control pin will be driven to logic 0 …\nNMM enable.\nReader of field <code>NMMEN</code>\nWrite proxy for field <code>NMMEN</code>\nPolarity control. This bit reverses the polarity of the …\nReader of field <code>OINV</code>\nWrite proxy for field <code>OINV</code>\nReader of register RS485CTRL\n0: If direction control is enabled (bit DCTRL = 1), pin …\nReceiver enable.\nReader of field <code>RXDIS</code>\nWrite proxy for field <code>RXDIS</code>\nSelect direction control pin.\nReader of field <code>SEL</code>\nWrite proxy for field <code>SEL</code>\nWriter for register RS485CTRL\nBit 2 - AAD enable.\nBit 2 - AAD enable.\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nBit 4 - Auto direction control enable.\nBit 4 - Auto direction control enable.\nDisable Auto Direction Control\nRS-485/EIA-485 Normal Multidrop Mode (NMM) is disabled\nThe receiver is disabled\nAuto Address Detect (AAD) is disabled\nIf direction control is enabled (bit DCTRL = 1), pin DTR …\nEnable Auto Direction Control\nRS-485/EIA-485 Normal Multidrop Mode (NMM) is enabled. In …\nThe receiver is enabled\nAuto Address Detect (AAD) is enabled\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe direction control pin will be driven to logic 1 when …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLE_AUTO_DIRECTI</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DTR</code>\nChecks if the value of the field is <code>ENABLE_AUTO_DIRECTIO</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>HIGH</code>\nChecks if the value of the field is <code>LOW</code>\nChecks if the value of the field is <code>RTS</code>\nThe direction control pin will be driven to logic 0 when …\nBit 0 - NMM enable.\nBit 0 - NMM enable.\nBit 5 - Polarity control. This bit reverses the polarity …\nBit 5 - Polarity control. This bit reverses the polarity …\nIf direction control is enabled (bit DCTRL = 1), pin RTS …\nBit 1 - Receiver enable.\nBit 1 - Receiver enable.\nBit 3 - Select direction control pin.\nBit 3 - Select direction control pin.\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nReader of field <code>DLY</code>\nWrite proxy for field <code>DLY</code>\nReader of register RS485DLY\nWriter for register RS485DLY\nWrites raw bits to the field\nBits 0:7 - Contains the direction control (RTS or DTR) …\nBits 0:7 - Contains the direction control (RTS or DTR) …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReader of field <code>pad</code>\nWrite proxy for field <code>pad</code>\nReader of register SCR\nWriter for register SCR\nWrites raw bits to the field\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBits 0:7 - A readable, writable byte.\nBits 0:7 - A readable, writable byte.\nReader of register TER\nReader of field <code>TXEN</code>\nWrite proxy for field <code>TXEN</code>\nWriter for register TER\nWrites raw bits to the field\nClears the field bit\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSets the field bit\nBit 7 - When this bit is 1, as it is after a Reset, data …\nBit 7 - When this bit is 1, as it is after a Reset, data …\nWrite proxy for field <code>THR</code>\nWriter for register THR\nWrites raw bits to the field\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBits 0:7 - Writing to the UART Transmit Holding Register …\nRegister block\nWatchdog feed sequence register. Writing 0xAA followed by …\nWatchdog mode register. This register contains the basic …\nWatchdog timer constant register. This register determines …\nWatchdog timer value register. This register reads out the …\nWatchdog Warning Interrupt compare value\nWatchdog Window compare value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWatchdog feed sequence register. Writing 0xAA followed by …\n0x08 - Watchdog feed sequence register. Writing 0xAA …\nWatchdog mode register. This register contains the basic …\n0x00 - Watchdog mode register. This register contains the …\nWatchdog timer constant register. This register determines …\n0x04 - Watchdog timer constant register. This register …\nWatchdog timer value register. This register reads out the …\n0x0c - Watchdog timer value register. This register reads …\nWatchdog Warning Interrupt compare value\n0x14 - Watchdog Warning Interrupt compare value\nWatchdog Window compare value\n0x18 - Watchdog Window compare value\nWrite proxy for field <code>Feed</code>\nWriter for register WDFEED\nWrites raw bits to the field\nBits 0:7 - Feed value should be 0xAA followed by 0x55.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n0: The watchdog reload value (WDTC) can be changed at any …\n1: The watchdog reload value (WDTC) can be changed only …\n0: A watchdog timeout will not cause a chip reset\nReader of register WDMOD\n1: A watchdog timeout will cause a chip reset\n1: The watchdog timer is running\n0: The watchdog timer is stopped\nWriter for register WDMOD\nWatchdog enable bit. This bit is Set Only. Setting this …\nReader of field <code>WDEN</code>\nWrite proxy for field <code>WDEN</code>\nReader of field <code>WDINT</code>\nWrite proxy for field <code>WDINT</code>\nWatchdog update mode. This bit is Set Only.\nReader of field <code>WDPROTECT</code>\nWrite proxy for field <code>WDPROTECT</code>\nWatchdog reset enable bit. This bit is Set Only.\nReader of field <code>WDRESET</code>\nWrite proxy for field <code>WDRESET</code>\nReader of field <code>WDTOF</code>\nWrite proxy for field <code>WDTOF</code>\nThe watchdog reload value (WDTC) can be changed at any time\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nWrites raw bits to the field\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nClears the field bit\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>ANYTIME</code>\nChecks if the value of the field is <code>LOWCOUNTER</code>\nChecks if the value of the field is <code>NORESET</code>\nChecks if the value of the field is <code>RESET</code>\nChecks if the value of the field is <code>RUN</code>\nChecks if the value of the field is <code>STOPPED</code>\nThe watchdog reload value (WDTC) can be changed only after …\nA watchdog timeout will not cause a chip reset\nA watchdog timeout will cause a chip reset\nThe watchdog timer is running\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nSets the field bit\nThe watchdog timer is stopped\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nGet enumerated values variant\nWrites <code>variant</code> to the field\nBit 0 - Watchdog enable bit. This bit is Set Only. Setting …\nBit 0 - Watchdog enable bit. This bit is Set Only. Setting …\nBit 3 - Watchdog interrupt flag. Set when the timer …\nBit 3 - Watchdog interrupt flag. Set when the timer …\nBit 4 - Watchdog update mode. This bit is Set Only.\nBit 4 - Watchdog update mode. This bit is Set Only.\nBit 1 - Watchdog reset enable bit. This bit is Set Only.\nBit 1 - Watchdog reset enable bit. This bit is Set Only.\nBit 2 - Watchdog time-out flag. Set when the watchdog …\nBit 2 - Watchdog time-out flag. Set when the watchdog …\nReader of field <code>Count</code>\nWrite proxy for field <code>Count</code>\nReader of register WDTC\nWriter for register WDTC\nWrites raw bits to the field\nBits 0:23 - Watchdog time-out interval.\nBits 0:23 - Watchdog time-out interval.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReader of field <code>Count</code>\nReader of register WDTV\nBits 0:23 - Counter timer value.\nReader of register WDWARNINT\nWriter for register WDWARNINT\nReader of field <code>WARNINT</code>\nWrite proxy for field <code>WARNINT</code>\nWrites raw bits to the field\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBits 0:9 - Watchdog warning interrupt compare value.\nBits 0:9 - Watchdog warning interrupt compare value.\nReader of register WDWINDOW\nWriter for register WDWINDOW\nReader of field <code>WINDOW</code>\nWrite proxy for field <code>WINDOW</code>\nWrites raw bits to the field\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBits 0:23 - Watchdog window value.\nBits 0:23 - Watchdog window value.")